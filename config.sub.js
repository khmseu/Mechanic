/*doFile -> {"Name":"config.sub"}*/

//  Configuration validation subroutine script.
//    Copyright 1992-2019 Free Software Foundation, Inc.
let 
"timestamp"
 = 
"2019-01-05"
 ; /*4*/
//  This file is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful, but
//  WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
// 
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, see <https://www.gnu.org/licenses/>.
// 
//  As a special exception to the GNU General Public License, if you
//  distribute this file as part of a program that contains a
//  configuration script generated by Autoconf, you may include it under
//  the same distribution terms that you use for the rest of that
//  program.  This Exception is an additional permission under section 7
//  of the GNU General Public License, version 3 ("GPLv3").
//  Please send patches to <config-patches@gnu.org>.
// 
//  Configuration subroutine to validate and canonicalize a configuration type.
//  Supply the specified configuration type as an argument.
//  If it is invalid, we print an error message on stderr and exit with code 1.
//  Otherwise, we print the canonical config type on stdout and succeed.
//  You can get the latest version of this script from:
//  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub
//  This file is supposed to be the same for all GNU packages
//  and recognize all the CPU types, system types and aliases
//  that are meaningful with *any* GNU software.
//  Each package is responsible for reporting which valid configurations
//  it does not support.  The user should be able to distinguish
//  a failure to support a valid configuration from a meaningless
//  configuration.
//  The goal of this file is to map all the various variations of a given
//  machine specification into a single specification in the form:
// 	CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM
//  or in some cases, the newer four-part form:
// 	CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM
//  It is wrong to echo any other type of specification.
let 
"me"
 = 
$( {
 + /*2*/"echo" + /*2*/process.argv0 + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s,.*/,," + /*2*/
} )
 ; /*4*/
let 
"usage"
 = 
"\\\nUsage: "
process.argv0
 
" [OPTION] CPU-MFR-OPSYS or ALIAS\n\nCanonicalize a configuration name.\n\nOptions:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>."
 ; /*4*/
let 
"version"
 = 
"\\\nGNU config.sub ("
timestamp
 
")\n\nCopyright 1992-2019 Free Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
 ; /*4*/
let 
"help"
 = 
"\nTry \\`"
me
 
" --help' for more information."
 ; /*4*/
//  Parse command line
while (
"test"
process.argv.length
 
"-gt"
"0"
) {

switch ( 
process.argv[1]
 
 + /*5*/
 ) {

"--time-stamp"
"--time*"
"-t"
"echo"
timestamp
 
"exit"
 ;;

"--version"
"-v"
"echo"
version
 
"exit"
 ;;

"--help"
"--h*"
"-h"
"echo"
usage
 
"exit"
 ;;

"--"
//  Stop option processing
"shift"
"break"
 ;;

"-"
//  Use stdin as input.
"break"
 ;;

"-*"
"echo"
me
 
": invalid option "
process.argv[1]
 
help
 
 >& 
"2"
"exit"
"1"
 ;;

"*local*"
//  First pass through any local machine types.
"echo"
process.argv[1]
 
"exit"
 ;;

"*"
"break"
 ;;


}

}
switch ( 
process.argv.length
 
 + /*5*/
 ) {

"0"
"echo"
me
 
": missing argument"
help
 
 >& 
"2"
"exit"
"1"
 ;;

"1"
 ;;

"*"
"echo"
me
 
": too many arguments"
help
 
 >& 
"2"
"exit"
"1"
 ;;


}
//  Split fields of configuration type
//  shellcheck disable=SC2162
let 
"IFS"
 = 
"-"
 ; /*4*/
"read"
"field1"
"field2"
"field3"
"field4"
 << 
"EOF"
process.argv[1]
 
"\n"
//  Separate into logical components for further validation
switch ( 
process.argv[1]
 
 + /*5*/
 ) {

"*-*-*-*-*"
"echo"
"Invalid"
"configuration"
"\\`"
process.argv[1]
 
"\\':"
"more"
"than"
"four"
"components"
 >& 
"2"
"exit"
"1"
 ;;

"*-*-*-*"
let 
"basic_machine"
 = 
field1
 
"-"
field2
 
 ; /*4*/
let 
"os"
 = 
field3
 
"-"
field4
 
 ; /*4*/
 ;;

"*-*-*"
//  Ambiguous whether COMPANY is present, or skipped and KERNEL-OS is two
//  parts
let 
"maybe_os"
 = 
field2
 
"-"
field3
 
 ; /*4*/
switch ( 
maybe_os
 
 + /*5*/
 ) {

"nto-qnx*"
"linux-gnu*"
"linux-android*"
"linux-dietlibc"
"linux-newlib*"
"linux-musl*"
"linux-uclibc*"
"uclinux-uclibc*"
"uclinux-gnu*"
"kfreebsd*-gnu*"
"knetbsd*-gnu*"
"netbsd*-gnu*"
"netbsd*-eabi*"
"kopensolaris*-gnu*"
"cloudabi*-eabi*"
"storm-chaos*"
"os2-emx*"
"rtmk-nova*"
let 
"basic_machine"
 = 
field1
 
 ; /*4*/
let 
"os"
 = 
maybe_os
 
 ; /*4*/
 ;;

"android-linux"
let 
"basic_machine"
 = 
field1
 
"-unknown"
 ; /*4*/
let 
"os"
 = 
"linux-android"
 ; /*4*/
 ;;

"*"
let 
"basic_machine"
 = 
field1
 
"-"
field2
 
 ; /*4*/
let 
"os"
 = 
field3
 
 ; /*4*/
 ;;


}
 ;;

"*-*"
//  A lone config we happen to match not fitting any pattern
switch ( 
field1
 
"-"
field2
 
 + /*5*/
 ) {

"decstation-3100"
let 
"basic_machine"
 = 
"mips-dec"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"*-*"
//  Second component is usually, but not always the OS
switch ( 
field2
 
 + /*5*/
 ) {

//  Prevent following clause from handling this valid os
"sun*os*"
let 
"basic_machine"
 = 
field1
 
 ; /*4*/
let 
"os"
 = 
field2
 
 ; /*4*/
 ;;

//  Manufacturers
"dec*"
"mips*"
"sequent*"
"encore*"
"pc533*"
"sgi*"
"sony*"
"att*"
"7300*"
"3300*"
"delta*"
"motorola*"
"sun[234]*"
"unicom*"
"ibm*"
"next"
"hp"
"isi*"
"apollo"
"altos*"
"convergent*"
"ncr*"
"news"
"32*"
"3600*"
"3100*"
"hitachi*"
"c[123]*"
"convex*"
"sun"
"crds"
"omron*"
"dg"
"ultra"
"tti*"
"harris"
"dolphin"
"highlevel"
"gould"
"cbm"
"ns"
"masscomp"
"apple"
"axis"
"knuth"
"cray"
"microblaze*"
"sim"
"cisco"
"oki"
"wec"
"wrs"
"winbond"
let 
"basic_machine"
 = 
field1
 
"-"
field2
 
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"*"
let 
"basic_machine"
 = 
field1
 
 ; /*4*/
let 
"os"
 = 
field2
 
 ; /*4*/
 ;;


}
 ;;


}
 ;;

"*"
//  Convert single-component short-hands not valid as part of
//  multi-component configurations.
switch ( 
field1
 
 + /*5*/
 ) {

"386bsd"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"a29khif"
let 
"basic_machine"
 = 
"a29k-amd"
 ; /*4*/
let 
"os"
 = 
"udi"
 ; /*4*/
 ;;

"adobe68k"
let 
"basic_machine"
 = 
"m68010-adobe"
 ; /*4*/
let 
"os"
 = 
"scout"
 ; /*4*/
 ;;

"alliant"
let 
"basic_machine"
 = 
"fx80-alliant"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"altos"
"altos3068"
let 
"basic_machine"
 = 
"m68k-altos"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"am29k"
let 
"basic_machine"
 = 
"a29k-none"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"amdahl"
let 
"basic_machine"
 = 
"580-amdahl"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"amiga"
let 
"basic_machine"
 = 
"m68k-unknown"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"amigaos"
"amigados"
let 
"basic_machine"
 = 
"m68k-unknown"
 ; /*4*/
let 
"os"
 = 
"amigaos"
 ; /*4*/
 ;;

"amigaunix"
"amix"
let 
"basic_machine"
 = 
"m68k-unknown"
 ; /*4*/
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"apollo68"
let 
"basic_machine"
 = 
"m68k-apollo"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"apollo68bsd"
let 
"basic_machine"
 = 
"m68k-apollo"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"aros"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"aros"
 ; /*4*/
 ;;

"aux"
let 
"basic_machine"
 = 
"m68k-apple"
 ; /*4*/
let 
"os"
 = 
"aux"
 ; /*4*/
 ;;

"balance"
let 
"basic_machine"
 = 
"ns32k-sequent"
 ; /*4*/
let 
"os"
 = 
"dynix"
 ; /*4*/
 ;;

"blackfin"
let 
"basic_machine"
 = 
"bfin-unknown"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"cegcc"
let 
"basic_machine"
 = 
"arm-unknown"
 ; /*4*/
let 
"os"
 = 
"cegcc"
 ; /*4*/
 ;;

"convex-c1"
let 
"basic_machine"
 = 
"c1-convex"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"convex-c2"
let 
"basic_machine"
 = 
"c2-convex"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"convex-c32"
let 
"basic_machine"
 = 
"c32-convex"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"convex-c34"
let 
"basic_machine"
 = 
"c34-convex"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"convex-c38"
let 
"basic_machine"
 = 
"c38-convex"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"cray"
let 
"basic_machine"
 = 
"j90-cray"
 ; /*4*/
let 
"os"
 = 
"unicos"
 ; /*4*/
 ;;

"crds"
"unos"
let 
"basic_machine"
 = 
"m68k-crds"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"da30"
let 
"basic_machine"
 = 
"m68k-da30"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"decstation"
"pmax"
"pmin"
"dec3100"
"decstatn"
let 
"basic_machine"
 = 
"mips-dec"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"delta88"
let 
"basic_machine"
 = 
"m88k-motorola"
 ; /*4*/
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"dicos"
let 
"basic_machine"
 = 
"i686-pc"
 ; /*4*/
let 
"os"
 = 
"dicos"
 ; /*4*/
 ;;

"djgpp"
let 
"basic_machine"
 = 
"i586-pc"
 ; /*4*/
let 
"os"
 = 
"msdosdjgpp"
 ; /*4*/
 ;;

"ebmon29k"
let 
"basic_machine"
 = 
"a29k-amd"
 ; /*4*/
let 
"os"
 = 
"ebmon"
 ; /*4*/
 ;;

"es1800"
"OSE68k"
"ose68k"
"ose"
"OSE"
let 
"basic_machine"
 = 
"m68k-ericsson"
 ; /*4*/
let 
"os"
 = 
"ose"
 ; /*4*/
 ;;

"gmicro"
let 
"basic_machine"
 = 
"tron-gmicro"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"go32"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"go32"
 ; /*4*/
 ;;

"h8300hms"
let 
"basic_machine"
 = 
"h8300-hitachi"
 ; /*4*/
let 
"os"
 = 
"hms"
 ; /*4*/
 ;;

"h8300xray"
let 
"basic_machine"
 = 
"h8300-hitachi"
 ; /*4*/
let 
"os"
 = 
"xray"
 ; /*4*/
 ;;

"h8500hms"
let 
"basic_machine"
 = 
"h8500-hitachi"
 ; /*4*/
let 
"os"
 = 
"hms"
 ; /*4*/
 ;;

"harris"
let 
"basic_machine"
 = 
"m88k-harris"
 ; /*4*/
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"hp300"
let 
"basic_machine"
 = 
"m68k-hp"
 ; /*4*/
 ;;

"hp300bsd"
let 
"basic_machine"
 = 
"m68k-hp"
 ; /*4*/
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"hp300hpux"
let 
"basic_machine"
 = 
"m68k-hp"
 ; /*4*/
let 
"os"
 = 
"hpux"
 ; /*4*/
 ;;

"hppaosf"
let 
"basic_machine"
 = 
"hppa1.1-hp"
 ; /*4*/
let 
"os"
 = 
"osf"
 ; /*4*/
 ;;

"hppro"
let 
"basic_machine"
 = 
"hppa1.1-hp"
 ; /*4*/
let 
"os"
 = 
"proelf"
 ; /*4*/
 ;;

"i386mach"
let 
"basic_machine"
 = 
"i386-mach"
 ; /*4*/
let 
"os"
 = 
"mach"
 ; /*4*/
 ;;

"vsta"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"vsta"
 ; /*4*/
 ;;

"isi68"
"isi"
let 
"basic_machine"
 = 
"m68k-isi"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"m68knommu"
let 
"basic_machine"
 = 
"m68k-unknown"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"magnum"
"m3230"
let 
"basic_machine"
 = 
"mips-mips"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"merlin"
let 
"basic_machine"
 = 
"ns32k-utek"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"mingw64"
let 
"basic_machine"
 = 
"x86_64-pc"
 ; /*4*/
let 
"os"
 = 
"mingw64"
 ; /*4*/
 ;;

"mingw32"
let 
"basic_machine"
 = 
"i686-pc"
 ; /*4*/
let 
"os"
 = 
"mingw32"
 ; /*4*/
 ;;

"mingw32ce"
let 
"basic_machine"
 = 
"arm-unknown"
 ; /*4*/
let 
"os"
 = 
"mingw32ce"
 ; /*4*/
 ;;

"monitor"
let 
"basic_machine"
 = 
"m68k-rom68k"
 ; /*4*/
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"morphos"
let 
"basic_machine"
 = 
"powerpc-unknown"
 ; /*4*/
let 
"os"
 = 
"morphos"
 ; /*4*/
 ;;

"moxiebox"
let 
"basic_machine"
 = 
"moxie-unknown"
 ; /*4*/
let 
"os"
 = 
"moxiebox"
 ; /*4*/
 ;;

"msdos"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"msdos"
 ; /*4*/
 ;;

"msys"
let 
"basic_machine"
 = 
"i686-pc"
 ; /*4*/
let 
"os"
 = 
"msys"
 ; /*4*/
 ;;

"mvs"
let 
"basic_machine"
 = 
"i370-ibm"
 ; /*4*/
let 
"os"
 = 
"mvs"
 ; /*4*/
 ;;

"nacl"
let 
"basic_machine"
 = 
"le32-unknown"
 ; /*4*/
let 
"os"
 = 
"nacl"
 ; /*4*/
 ;;

"ncr3000"
let 
"basic_machine"
 = 
"i486-ncr"
 ; /*4*/
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"netbsd386"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"netbsd"
 ; /*4*/
 ;;

"netwinder"
let 
"basic_machine"
 = 
"armv4l-rebel"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"news"
"news700"
"news800"
"news900"
let 
"basic_machine"
 = 
"m68k-sony"
 ; /*4*/
let 
"os"
 = 
"newsos"
 ; /*4*/
 ;;

"news1000"
let 
"basic_machine"
 = 
"m68030-sony"
 ; /*4*/
let 
"os"
 = 
"newsos"
 ; /*4*/
 ;;

"necv70"
let 
"basic_machine"
 = 
"v70-nec"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"nh3000"
let 
"basic_machine"
 = 
"m68k-harris"
 ; /*4*/
let 
"os"
 = 
"cxux"
 ; /*4*/
 ;;

"nh[45]000"
let 
"basic_machine"
 = 
"m88k-harris"
 ; /*4*/
let 
"os"
 = 
"cxux"
 ; /*4*/
 ;;

"nindy960"
let 
"basic_machine"
 = 
"i960-intel"
 ; /*4*/
let 
"os"
 = 
"nindy"
 ; /*4*/
 ;;

"mon960"
let 
"basic_machine"
 = 
"i960-intel"
 ; /*4*/
let 
"os"
 = 
"mon960"
 ; /*4*/
 ;;

"nonstopux"
let 
"basic_machine"
 = 
"mips-compaq"
 ; /*4*/
let 
"os"
 = 
"nonstopux"
 ; /*4*/
 ;;

"os400"
let 
"basic_machine"
 = 
"powerpc-ibm"
 ; /*4*/
let 
"os"
 = 
"os400"
 ; /*4*/
 ;;

"OSE68000"
"ose68000"
let 
"basic_machine"
 = 
"m68000-ericsson"
 ; /*4*/
let 
"os"
 = 
"ose"
 ; /*4*/
 ;;

"os68k"
let 
"basic_machine"
 = 
"m68k-none"
 ; /*4*/
let 
"os"
 = 
"os68k"
 ; /*4*/
 ;;

"paragon"
let 
"basic_machine"
 = 
"i860-intel"
 ; /*4*/
let 
"os"
 = 
"osf"
 ; /*4*/
 ;;

"parisc"
let 
"basic_machine"
 = 
"hppa-unknown"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"pw32"
let 
"basic_machine"
 = 
"i586-unknown"
 ; /*4*/
let 
"os"
 = 
"pw32"
 ; /*4*/
 ;;

"rdos"
"rdos64"
let 
"basic_machine"
 = 
"x86_64-pc"
 ; /*4*/
let 
"os"
 = 
"rdos"
 ; /*4*/
 ;;

"rdos32"
let 
"basic_machine"
 = 
"i386-pc"
 ; /*4*/
let 
"os"
 = 
"rdos"
 ; /*4*/
 ;;

"rom68k"
let 
"basic_machine"
 = 
"m68k-rom68k"
 ; /*4*/
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"sa29200"
let 
"basic_machine"
 = 
"a29k-amd"
 ; /*4*/
let 
"os"
 = 
"udi"
 ; /*4*/
 ;;

"sei"
let 
"basic_machine"
 = 
"mips-sei"
 ; /*4*/
let 
"os"
 = 
"seiux"
 ; /*4*/
 ;;

"sequent"
let 
"basic_machine"
 = 
"i386-sequent"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"sps7"
let 
"basic_machine"
 = 
"m68k-bull"
 ; /*4*/
let 
"os"
 = 
"sysv2"
 ; /*4*/
 ;;

"st2000"
let 
"basic_machine"
 = 
"m68k-tandem"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"stratus"
let 
"basic_machine"
 = 
"i860-stratus"
 ; /*4*/
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"sun2"
let 
"basic_machine"
 = 
"m68000-sun"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"sun2os3"
let 
"basic_machine"
 = 
"m68000-sun"
 ; /*4*/
let 
"os"
 = 
"sunos3"
 ; /*4*/
 ;;

"sun2os4"
let 
"basic_machine"
 = 
"m68000-sun"
 ; /*4*/
let 
"os"
 = 
"sunos4"
 ; /*4*/
 ;;

"sun3"
let 
"basic_machine"
 = 
"m68k-sun"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"sun3os3"
let 
"basic_machine"
 = 
"m68k-sun"
 ; /*4*/
let 
"os"
 = 
"sunos3"
 ; /*4*/
 ;;

"sun3os4"
let 
"basic_machine"
 = 
"m68k-sun"
 ; /*4*/
let 
"os"
 = 
"sunos4"
 ; /*4*/
 ;;

"sun4"
let 
"basic_machine"
 = 
"sparc-sun"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"sun4os3"
let 
"basic_machine"
 = 
"sparc-sun"
 ; /*4*/
let 
"os"
 = 
"sunos3"
 ; /*4*/
 ;;

"sun4os4"
let 
"basic_machine"
 = 
"sparc-sun"
 ; /*4*/
let 
"os"
 = 
"sunos4"
 ; /*4*/
 ;;

"sun4sol2"
let 
"basic_machine"
 = 
"sparc-sun"
 ; /*4*/
let 
"os"
 = 
"solaris2"
 ; /*4*/
 ;;

"sun386"
"sun386i"
"roadrunner"
let 
"basic_machine"
 = 
"i386-sun"
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;

"sv1"
let 
"basic_machine"
 = 
"sv1-cray"
 ; /*4*/
let 
"os"
 = 
"unicos"
 ; /*4*/
 ;;

"symmetry"
let 
"basic_machine"
 = 
"i386-sequent"
 ; /*4*/
let 
"os"
 = 
"dynix"
 ; /*4*/
 ;;

"t3e"
let 
"basic_machine"
 = 
"alphaev5-cray"
 ; /*4*/
let 
"os"
 = 
"unicos"
 ; /*4*/
 ;;

"t90"
let 
"basic_machine"
 = 
"t90-cray"
 ; /*4*/
let 
"os"
 = 
"unicos"
 ; /*4*/
 ;;

"toad1"
let 
"basic_machine"
 = 
"pdp10-xkl"
 ; /*4*/
let 
"os"
 = 
"tops20"
 ; /*4*/
 ;;

"tpf"
let 
"basic_machine"
 = 
"s390x-ibm"
 ; /*4*/
let 
"os"
 = 
"tpf"
 ; /*4*/
 ;;

"udi29k"
let 
"basic_machine"
 = 
"a29k-amd"
 ; /*4*/
let 
"os"
 = 
"udi"
 ; /*4*/
 ;;

"ultra3"
let 
"basic_machine"
 = 
"a29k-nyu"
 ; /*4*/
let 
"os"
 = 
"sym1"
 ; /*4*/
 ;;

"v810"
"necv810"
let 
"basic_machine"
 = 
"v810-nec"
 ; /*4*/
let 
"os"
 = 
"none"
 ; /*4*/
 ;;

"vaxv"
let 
"basic_machine"
 = 
"vax-dec"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"vms"
let 
"basic_machine"
 = 
"vax-dec"
 ; /*4*/
let 
"os"
 = 
"vms"
 ; /*4*/
 ;;

"vxworks960"
let 
"basic_machine"
 = 
"i960-wrs"
 ; /*4*/
let 
"os"
 = 
"vxworks"
 ; /*4*/
 ;;

"vxworks68"
let 
"basic_machine"
 = 
"m68k-wrs"
 ; /*4*/
let 
"os"
 = 
"vxworks"
 ; /*4*/
 ;;

"vxworks29k"
let 
"basic_machine"
 = 
"a29k-wrs"
 ; /*4*/
let 
"os"
 = 
"vxworks"
 ; /*4*/
 ;;

"xbox"
let 
"basic_machine"
 = 
"i686-pc"
 ; /*4*/
let 
"os"
 = 
"mingw32"
 ; /*4*/
 ;;

"ymp"
let 
"basic_machine"
 = 
"ymp-cray"
 ; /*4*/
let 
"os"
 = 
"unicos"
 ; /*4*/
 ;;

"*"
let 
"basic_machine"
 = 
process.argv[1]
 
 ; /*4*/
let 
"os"
 = 
 ; /*4*/
 ;;


}
 ;;


}
//  Decode 1-component or ad-hoc basic machines
switch ( 
basic_machine
 
 + /*5*/
 ) {

//  Here we handle the default manufacturer of certain CPU types.  It is in
//  some cases the only manufacturer, in others, it is the most popular.
"w89k"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"winbond"
 ; /*4*/
 ;;

"op50n"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"oki"
 ; /*4*/
 ;;

"op60c"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"oki"
 ; /*4*/
 ;;

"ibm*"
let 
"cpu"
 = 
"i370"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"orion105"
let 
"cpu"
 = 
"clipper"
 ; /*4*/
let 
"vendor"
 = 
"highlevel"
 ; /*4*/
 ;;

"mac"
"mpw"
"mac-mpw"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"apple"
 ; /*4*/
 ;;

"pmac"
"pmac-mpw"
let 
"cpu"
 = 
"powerpc"
 ; /*4*/
let 
"vendor"
 = 
"apple"
 ; /*4*/
 ;;

//  Recognize the various machine names and aliases which stand
//  for a CPU type and a company and sometimes even an OS.
"3b1"
"7300"
"7300-att"
"att-7300"
"pc7300"
"safari"
"unixpc"
let 
"cpu"
 = 
"m68000"
 ; /*4*/
let 
"vendor"
 = 
"att"
 ; /*4*/
 ;;

"3b*"
let 
"cpu"
 = 
"we32k"
 ; /*4*/
let 
"vendor"
 = 
"att"
 ; /*4*/
 ;;

"bluegene*"
let 
"cpu"
 = 
"powerpc"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
let 
"os"
 = 
"cnk"
 ; /*4*/
 ;;

"decsystem10*"
"dec10*"
let 
"cpu"
 = 
"pdp10"
 ; /*4*/
let 
"vendor"
 = 
"dec"
 ; /*4*/
let 
"os"
 = 
"tops10"
 ; /*4*/
 ;;

"decsystem20*"
"dec20*"
let 
"cpu"
 = 
"pdp10"
 ; /*4*/
let 
"vendor"
 = 
"dec"
 ; /*4*/
let 
"os"
 = 
"tops20"
 ; /*4*/
 ;;

"delta"
"3300"
"motorola-3300"
"motorola-delta"
"3300-motorola"
"delta-motorola"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"motorola"
 ; /*4*/
 ;;

"dpx2*"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"bull"
 ; /*4*/
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"encore"
"umax"
"mmax"
let 
"cpu"
 = 
"ns32k"
 ; /*4*/
let 
"vendor"
 = 
"encore"
 ; /*4*/
 ;;

"elxsi"
let 
"cpu"
 = 
"elxsi"
 ; /*4*/
let 
"vendor"
 = 
"elxsi"
 ; /*4*/
let 
"os"
 = 
(
os
 :-  "bsd"
)
 
 ; /*4*/
 ;;

"fx2800"
let 
"cpu"
 = 
"i860"
 ; /*4*/
let 
"vendor"
 = 
"alliant"
 ; /*4*/
 ;;

"genix"
let 
"cpu"
 = 
"ns32k"
 ; /*4*/
let 
"vendor"
 = 
"ns"
 ; /*4*/
 ;;

"h3050r*"
"hiux*"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"hitachi"
 ; /*4*/
let 
"os"
 = 
"hiuxwe2"
 ; /*4*/
 ;;

"hp3k9[0-9][0-9]"
"hp9[0-9][0-9]"
let 
"cpu"
 = 
"hppa1.0"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k2[0-9][0-9]"
"hp9k31[0-9]"
let 
"cpu"
 = 
"m68000"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k3[2-9][0-9]"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k6[0-9][0-9]"
"hp6[0-9][0-9]"
let 
"cpu"
 = 
"hppa1.0"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k7[0-79][0-9]"
"hp7[0-79][0-9]"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k78[0-9]"
"hp78[0-9]"
//  FIXME: really hppa2.0-hp
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k8[67]1"
"hp8[67]1"
"hp9k80[24]"
"hp80[24]"
"hp9k8[78]9"
"hp8[78]9"
"hp9k893"
"hp893"
//  FIXME: really hppa2.0-hp
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k8[0-9][13679]"
"hp8[0-9][13679]"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hp9k8[0-9][0-9]"
"hp8[0-9][0-9]"
let 
"cpu"
 = 
"hppa1.0"
 ; /*4*/
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"i*86v32"
let 
"cpu"
 = 
$( {
 + /*2*/"echo" + /*2*/process.argv[1] + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/86.*/86/" + /*2*/
} )
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
let 
"os"
 = 
"sysv32"
 ; /*4*/
 ;;

"i*86v4*"
let 
"cpu"
 = 
$( {
 + /*2*/"echo" + /*2*/process.argv[1] + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/86.*/86/" + /*2*/
} )
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"i*86v"
let 
"cpu"
 = 
$( {
 + /*2*/"echo" + /*2*/process.argv[1] + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/86.*/86/" + /*2*/
} )
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"i*86sol2"
let 
"cpu"
 = 
$( {
 + /*2*/"echo" + /*2*/process.argv[1] + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/86.*/86/" + /*2*/
} )
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
let 
"os"
 = 
"solaris2"
 ; /*4*/
 ;;

"j90"
"j90-cray"
let 
"cpu"
 = 
"j90"
 ; /*4*/
let 
"vendor"
 = 
"cray"
 ; /*4*/
let 
"os"
 = 
(
os
 :-  "unicos"
)
 
 ; /*4*/
 ;;

"iris"
"iris4d"
let 
"cpu"
 = 
"mips"
 ; /*4*/
let 
"vendor"
 = 
"sgi"
 ; /*4*/
switch ( 
os
 
 + /*5*/
 ) {

"irix*"
 ;;

"*"
let 
"os"
 = 
"irix4"
 ; /*4*/
 ;;


}
 ;;

"miniframe"
let 
"cpu"
 = 
"m68000"
 ; /*4*/
let 
"vendor"
 = 
"convergent"
 ; /*4*/
 ;;

"*mint"
"mint[0-9]*"
"*MiNT"
"*MiNT[0-9]*"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"atari"
 ; /*4*/
let 
"os"
 = 
"mint"
 ; /*4*/
 ;;

"news-3600"
"risc-news"
let 
"cpu"
 = 
"mips"
 ; /*4*/
let 
"vendor"
 = 
"sony"
 ; /*4*/
let 
"os"
 = 
"newsos"
 ; /*4*/
 ;;

"next"
"m*-next"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"next"
 ; /*4*/
switch ( 
os
 
 + /*5*/
 ) {

"nextstep*"
 ;;

"ns2*"
let 
"os"
 = 
"nextstep2"
 ; /*4*/
 ;;

"*"
let 
"os"
 = 
"nextstep3"
 ; /*4*/
 ;;


}
 ;;

"np1"
let 
"cpu"
 = 
"np1"
 ; /*4*/
let 
"vendor"
 = 
"gould"
 ; /*4*/
 ;;

"op50n-*"
"op60c-*"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"oki"
 ; /*4*/
let 
"os"
 = 
"proelf"
 ; /*4*/
 ;;

"pa-hitachi"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"hitachi"
 ; /*4*/
let 
"os"
 = 
"hiuxwe2"
 ; /*4*/
 ;;

"pbd"
let 
"cpu"
 = 
"sparc"
 ; /*4*/
let 
"vendor"
 = 
"tti"
 ; /*4*/
 ;;

"pbb"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"tti"
 ; /*4*/
 ;;

"pc532"
let 
"cpu"
 = 
"ns32k"
 ; /*4*/
let 
"vendor"
 = 
"pc532"
 ; /*4*/
 ;;

"pn"
let 
"cpu"
 = 
"pn"
 ; /*4*/
let 
"vendor"
 = 
"gould"
 ; /*4*/
 ;;

"power"
let 
"cpu"
 = 
"power"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"ps2"
let 
"cpu"
 = 
"i386"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"rm[46]00"
let 
"cpu"
 = 
"mips"
 ; /*4*/
let 
"vendor"
 = 
"siemens"
 ; /*4*/
 ;;

"rtpc"
"rtpc-*"
let 
"cpu"
 = 
"romp"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"sde"
let 
"cpu"
 = 
"mipsisa32"
 ; /*4*/
let 
"vendor"
 = 
"sde"
 ; /*4*/
let 
"os"
 = 
(
os
 :-  "elf"
)
 
 ; /*4*/
 ;;

"simso-wrs"
let 
"cpu"
 = 
"sparclite"
 ; /*4*/
let 
"vendor"
 = 
"wrs"
 ; /*4*/
let 
"os"
 = 
"vxworks"
 ; /*4*/
 ;;

"tower"
"tower-32"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"vendor"
 = 
"ncr"
 ; /*4*/
 ;;

"vpp*"
"vx"
"vx-*"
let 
"cpu"
 = 
"f301"
 ; /*4*/
let 
"vendor"
 = 
"fujitsu"
 ; /*4*/
 ;;

"w65"
let 
"cpu"
 = 
"w65"
 ; /*4*/
let 
"vendor"
 = 
"wdc"
 ; /*4*/
 ;;

"w89k-*"
let 
"cpu"
 = 
"hppa1.1"
 ; /*4*/
let 
"vendor"
 = 
"winbond"
 ; /*4*/
let 
"os"
 = 
"proelf"
 ; /*4*/
 ;;

"none"
let 
"cpu"
 = 
"none"
 ; /*4*/
let 
"vendor"
 = 
"none"
 ; /*4*/
 ;;

"leon"
"leon[3-9]"
let 
"cpu"
 = 
"sparc"
 ; /*4*/
let 
"vendor"
 = 
basic_machine
 
 ; /*4*/
 ;;

"leon-*"
"leon[3-9]-*"
let 
"cpu"
 = 
"sparc"
 ; /*4*/
let 
"vendor"
 = 
$( {
 + /*2*/"echo" + /*2*/basic_machine + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"s/-.*//" + /*2*/
} )
 ; /*4*/
 ;;

"*-*"
//  shellcheck disable=SC2162
let 
"IFS"
 = 
"-"
 ; /*4*/
"read"
"cpu"
"vendor"
 << 
"EOF"
basic_machine
 
"\n"
 ;;

//  We use `pc' rather than `unknown'
//  because (1) that's what they normally are, and
//  (2) the word "unknown" tends to confuse beginning users.
"i*86"
"x86_64"
let 
"cpu"
 = 
basic_machine
 
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
 ;;

//  These rules are duplicated from below for sake of the special case above;
//  i.e. things that normalized to x86 arches should also default to "pc"
"pc98"
let 
"cpu"
 = 
"i386"
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
 ;;

"x64"
"amd64"
let 
"cpu"
 = 
"x86_64"
 ; /*4*/
let 
"vendor"
 = 
"pc"
 ; /*4*/
 ;;

//  Recognize the basic CPU types without company name.
"*"
let 
"cpu"
 = 
basic_machine
 
 ; /*4*/
let 
"vendor"
 = 
"unknown"
 ; /*4*/
 ;;


}
"unset"
"-v"
"basic_machine"
//  Decode basic machines in the full and proper CPU-Company form.
switch ( 
cpu
 
"-"
vendor
 
 + /*5*/
 ) {

//  Here we handle the default manufacturer of certain CPU types in canonical form. It is in
//  some cases the only manufacturer, in others, it is the most popular.
"craynv-unknown"
let 
"vendor"
 = 
"cray"
 ; /*4*/
let 
"os"
 = 
(
os
 :-  "unicosmp"
)
 
 ; /*4*/
 ;;

"c90-unknown"
"c90-cray"
let 
"vendor"
 = 
"cray"
 ; /*4*/
let 
"os"
 = 
(
os
 :-  "unicos"
)
 
 ; /*4*/
 ;;

"fx80-unknown"
let 
"vendor"
 = 
"alliant"
 ; /*4*/
 ;;

"romp-unknown"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"mmix-unknown"
let 
"vendor"
 = 
"knuth"
 ; /*4*/
 ;;

"microblaze-unknown"
"microblazeel-unknown"
let 
"vendor"
 = 
"xilinx"
 ; /*4*/
 ;;

"rs6000-unknown"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"vax-unknown"
let 
"vendor"
 = 
"dec"
 ; /*4*/
 ;;

"pdp11-unknown"
let 
"vendor"
 = 
"dec"
 ; /*4*/
 ;;

"we32k-unknown"
let 
"vendor"
 = 
"att"
 ; /*4*/
 ;;

"cydra-unknown"
let 
"vendor"
 = 
"cydrome"
 ; /*4*/
 ;;

"i370-ibm*"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"orion-unknown"
let 
"vendor"
 = 
"highlevel"
 ; /*4*/
 ;;

"xps-unknown"
"xps100-unknown"
let 
"cpu"
 = 
"xps100"
 ; /*4*/
let 
"vendor"
 = 
"honeywell"
 ; /*4*/
 ;;

//  Here we normalize CPU types with a missing or matching vendor
"dpx20-unknown"
"dpx20-bull"
let 
"cpu"
 = 
"rs6000"
 ; /*4*/
let 
"vendor"
 = 
"bull"
 ; /*4*/
let 
"os"
 = 
(
os
 :-  "bosx"
)
 
 ; /*4*/
 ;;

//  Here we normalize CPU types irrespective of the vendor
"amd64-*"
let 
"cpu"
 = 
"x86_64"
 ; /*4*/
 ;;

"blackfin-*"
let 
"cpu"
 = 
"bfin"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"c54x-*"
let 
"cpu"
 = 
"tic54x"
 ; /*4*/
 ;;

"c55x-*"
let 
"cpu"
 = 
"tic55x"
 ; /*4*/
 ;;

"c6x-*"
let 
"cpu"
 = 
"tic6x"
 ; /*4*/
 ;;

"e500v[12]-*"
let 
"cpu"
 = 
"powerpc"
 ; /*4*/
let 
"os"
 = 
os
 
"spe"
 ; /*4*/
 ;;

"mips3*-*"
let 
"cpu"
 = 
"mips64"
 ; /*4*/
 ;;

"ms1-*"
let 
"cpu"
 = 
"mt"
 ; /*4*/
 ;;

"m68knommu-*"
let 
"cpu"
 = 
"m68k"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"m9s12z-*"
"m68hcs12z-*"
"hcs12z-*"
"s12z-*"
let 
"cpu"
 = 
"s12z"
 ; /*4*/
 ;;

"openrisc-*"
let 
"cpu"
 = 
"or32"
 ; /*4*/
 ;;

"parisc-*"
let 
"cpu"
 = 
"hppa"
 ; /*4*/
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"pentium-*"
"p5-*"
"k5-*"
"k6-*"
"nexgen-*"
"viac3-*"
let 
"cpu"
 = 
"i586"
 ; /*4*/
 ;;

"pentiumpro-*"
"p6-*"
"6x86-*"
"athlon-*"
"athalon_*-*"
let 
"cpu"
 = 
"i686"
 ; /*4*/
 ;;

"pentiumii-*"
"pentium2-*"
"pentiumiii-*"
"pentium3-*"
let 
"cpu"
 = 
"i686"
 ; /*4*/
 ;;

"pentium4-*"
let 
"cpu"
 = 
"i786"
 ; /*4*/
 ;;

"pc98-*"
let 
"cpu"
 = 
"i386"
 ; /*4*/
 ;;

"ppc-*"
"ppcbe-*"
let 
"cpu"
 = 
"powerpc"
 ; /*4*/
 ;;

"ppcle-*"
"powerpclittle-*"
let 
"cpu"
 = 
"powerpcle"
 ; /*4*/
 ;;

"ppc64-*"
let 
"cpu"
 = 
"powerpc64"
 ; /*4*/
 ;;

"ppc64le-*"
"powerpc64little-*"
let 
"cpu"
 = 
"powerpc64le"
 ; /*4*/
 ;;

"sb1-*"
let 
"cpu"
 = 
"mipsisa64sb1"
 ; /*4*/
 ;;

"sb1el-*"
let 
"cpu"
 = 
"mipsisa64sb1el"
 ; /*4*/
 ;;

"sh5e[lb]-*"
let 
"cpu"
 = 
$( {
 + /*2*/"echo" + /*2*/cpu + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"s/^\\(sh.\\)e\\(.\\)$/\\1\\2e/" + /*2*/
} )
 ; /*4*/
 ;;

"spur-*"
let 
"cpu"
 = 
"spur"
 ; /*4*/
 ;;

"strongarm-*"
"thumb-*"
let 
"cpu"
 = 
"arm"
 ; /*4*/
 ;;

"tx39-*"
let 
"cpu"
 = 
"mipstx39"
 ; /*4*/
 ;;

"tx39el-*"
let 
"cpu"
 = 
"mipstx39el"
 ; /*4*/
 ;;

"x64-*"
let 
"cpu"
 = 
"x86_64"
 ; /*4*/
 ;;

"xscale-*"
"xscalee[bl]-*"
let 
"cpu"
 = 
$( {
 + /*2*/"echo" + /*2*/cpu + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"s/^xscale/arm/" + /*2*/
} )
 ; /*4*/
 ;;

//  Recognize the canonical CPU Types that limit and/or modify the
//  company names they are paired with.
"cr16-*"
let 
"os"
 = 
(
os
 :-  "elf"
)
 
 ; /*4*/
 ;;

"crisv32-*"
"etraxfs*-*"
let 
"cpu"
 = 
"crisv32"
 ; /*4*/
let 
"vendor"
 = 
"axis"
 ; /*4*/
 ;;

"cris-*"
"etrax*-*"
let 
"cpu"
 = 
"cris"
 ; /*4*/
let 
"vendor"
 = 
"axis"
 ; /*4*/
 ;;

"crx-*"
let 
"os"
 = 
(
os
 :-  "elf"
)
 
 ; /*4*/
 ;;

"neo-tandem"
let 
"cpu"
 = 
"neo"
 ; /*4*/
let 
"vendor"
 = 
"tandem"
 ; /*4*/
 ;;

"nse-tandem"
let 
"cpu"
 = 
"nse"
 ; /*4*/
let 
"vendor"
 = 
"tandem"
 ; /*4*/
 ;;

"nsr-tandem"
let 
"cpu"
 = 
"nsr"
 ; /*4*/
let 
"vendor"
 = 
"tandem"
 ; /*4*/
 ;;

"nsv-tandem"
let 
"cpu"
 = 
"nsv"
 ; /*4*/
let 
"vendor"
 = 
"tandem"
 ; /*4*/
 ;;

"nsx-tandem"
let 
"cpu"
 = 
"nsx"
 ; /*4*/
let 
"vendor"
 = 
"tandem"
 ; /*4*/
 ;;

"s390-*"
let 
"cpu"
 = 
"s390"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"s390x-*"
let 
"cpu"
 = 
"s390x"
 ; /*4*/
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"tile*-*"
let 
"os"
 = 
(
os
 :-  "linux-gnu"
)
 
 ; /*4*/
 ;;

"*"
//  Recognize the canonical CPU types that are allowed with any
//  company name.
switch ( 
cpu
 
 + /*5*/
 ) {

"1750a"
"580"
"a29k"
"aarch64"
"aarch64_be"
"abacus"
"alpha"
"alphaev[4-8]"
"alphaev56"
"alphaev6[78]"
"alpha64"
"alpha64ev[4-8]"
"alpha64ev56"
"alpha64ev6[78]"
"alphapca5[67]"
"alpha64pca5[67]"
"am33_2.0"
"amdgcn"
"arc"
"arceb"
"arm"
"arm[lb]e"
"arme[lb]"
"armv*"
"avr"
"avr32"
"asmjs"
"ba"
"be32"
"be64"
"bfin"
"bs2000"
"c[123]*"
"c30"
"[cjt]90"
"c4x"
"c8051"
"clipper"
"craynv"
"csky"
"cydra"
"d10v"
"d30v"
"dlx"
"dsp16xx"
"e2k"
"elxsi"
"epiphany"
"f30[01]"
"f700"
"fido"
"fr30"
"frv"
"ft32"
"fx80"
"h8300"
"h8500"
"hppa"
"hppa1.[01]"
"hppa2.0"
"hppa2.0[nw]"
"hppa64"
"hexagon"
"i370"
"i*86"
"i860"
"i960"
"ia16"
"ia64"
"ip2k"
"iq2000"
"k1om"
"le32"
"le64"
"lm32"
"m32c"
"m32r"
"m32rle"
"m5200"
"m68000"
"m680[012346]0"
"m68360"
"m683?2"
"m68k"
"m6811"
"m68hc11"
"m6812"
"m68hc12"
"m68hcs12x"
"m88110"
"m88k"
"maxq"
"mb"
"mcore"
"mep"
"metag"
"microblaze"
"microblazeel"
"mips"
"mipsbe"
"mipseb"
"mipsel"
"mipsle"
"mips16"
"mips64"
"mips64eb"
"mips64el"
"mips64octeon"
"mips64octeonel"
"mips64orion"
"mips64orionel"
"mips64r5900"
"mips64r5900el"
"mips64vr"
"mips64vrel"
"mips64vr4100"
"mips64vr4100el"
"mips64vr4300"
"mips64vr4300el"
"mips64vr5000"
"mips64vr5000el"
"mips64vr5900"
"mips64vr5900el"
"mipsisa32"
"mipsisa32el"
"mipsisa32r2"
"mipsisa32r2el"
"mipsisa32r6"
"mipsisa32r6el"
"mipsisa64"
"mipsisa64el"
"mipsisa64r2"
"mipsisa64r2el"
"mipsisa64r6"
"mipsisa64r6el"
"mipsisa64sb1"
"mipsisa64sb1el"
"mipsisa64sr71k"
"mipsisa64sr71kel"
"mipsr5900"
"mipsr5900el"
"mipstx39"
"mipstx39el"
"mmix"
"mn10200"
"mn10300"
"moxie"
"mt"
"msp430"
"nds32"
"nds32le"
"nds32be"
"nfp"
"nios"
"nios2"
"nios2eb"
"nios2el"
"none"
"np1"
"ns16k"
"ns32k"
"nvptx"
"open8"
"or1k*"
"or32"
"orion"
"picochip"
"pdp10"
"pdp11"
"pj"
"pjl"
"pn"
"power"
"powerpc"
"powerpc64"
"powerpc64le"
"powerpcle"
"powerpcspe"
"pru"
"pyramid"
"riscv"
"riscv32"
"riscv64"
"rl78"
"romp"
"rs6000"
"rx"
"score"
"sh"
"shl"
"sh[1234]"
"sh[24]a"
"sh[24]ae[lb]"
"sh[23]e"
"she[lb]"
"sh[lb]e"
"sh[1234]e[lb]"
"sh[12345][lb]e"
"sh[23]ele"
"sh64"
"sh64le"
"sparc"
"sparc64"
"sparc64b"
"sparc64v"
"sparc86x"
"sparclet"
"sparclite"
"sparcv8"
"sparcv9"
"sparcv9b"
"sparcv9v"
"sv1"
"sx*"
"spu"
"tahoe"
"tic30"
"tic4x"
"tic54x"
"tic55x"
"tic6x"
"tic80"
"tron"
"ubicom32"
"v70"
"v850"
"v850e"
"v850e1"
"v850es"
"v850e2"
"v850e2v3"
"vax"
"visium"
"w65"
"wasm32"
"we32k"
"x86"
"x86_64"
"xc16x"
"xgate"
"xps100"
"xstormy16"
"xtensa*"
"ymp"
"z8k"
"z80"
 ;;

"*"
"echo"
"Invalid"
"configuration"
"\\`"
process.argv[1]
 
"\\':"
"machine"
"\\`"
cpu
 
"-"
vendor
 
"\\'"
"not"
"recognized"
"1"
 >& 
"2"
"exit"
"1"
 ;;


}
 ;;


}
//  Here we canonicalize certain aliases for manufacturers.
switch ( 
vendor
 
 + /*5*/
 ) {

"digital*"
let 
"vendor"
 = 
"dec"
 ; /*4*/
 ;;

"commodore*"
let 
"vendor"
 = 
"cbm"
 ; /*4*/
 ;;

"*"
 ;;


}
//  Decode manufacturer-specific aliases for certain operating systems.
if ( 
"["
"x"
os
 
"!="
"x"
"]"
 ) 
{

switch ( 
os
 
 + /*5*/
 ) {

//  First match some system type aliases that might get confused
//  with valid system types.
//  solaris* is a basic system type, with this one exception.
"auroraux"
let 
"os"
 = 
"auroraux"
 ; /*4*/
 ;;

"bluegene*"
let 
"os"
 = 
"cnk"
 ; /*4*/
 ;;

"solaris1"
"solaris1.*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|solaris1|sunos4|" + /*2*/
} )
 ; /*4*/
 ;;

"solaris"
let 
"os"
 = 
"solaris2"
 ; /*4*/
 ;;

"unixware*"
let 
"os"
 = 
"sysv4.2uw"
 ; /*4*/
 ;;

"gnu/linux*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|gnu/linux|linux-gnu|" + /*2*/
} )
 ; /*4*/
 ;;

//  es1800 is here to avoid being matched by es* (a different OS)
"es1800*"
let 
"os"
 = 
"ose"
 ; /*4*/
 ;;

//  Some version numbers need modification
"chorusos*"
let 
"os"
 = 
"chorusos"
 ; /*4*/
 ;;

"isc"
let 
"os"
 = 
"isc2.2"
 ; /*4*/
 ;;

"sco6"
let 
"os"
 = 
"sco5v6"
 ; /*4*/
 ;;

"sco5"
let 
"os"
 = 
"sco3.2v5"
 ; /*4*/
 ;;

"sco4"
let 
"os"
 = 
"sco3.2v4"
 ; /*4*/
 ;;

"sco3.2.[4-9]*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/sco3.2./sco3.2v/" + /*2*/
} )
 ; /*4*/
 ;;

"sco3.2v[4-9]*"
"sco5v6*"
//  Don't forget version if it is 3.2v4 or newer.
 ;;

"scout"
//  Don't match below
 ;;

"sco*"
let 
"os"
 = 
"sco3.2v2"
 ; /*4*/
 ;;

"psos*"
let 
"os"
 = 
"psos"
 ; /*4*/
 ;;

//  Now accept the basic system types.
//  The portable systems comes first.
//  Each alternative MUST end in a * to match a version number.
//  sysv* is not here because it comes later, after sysvr4.
"gnu*"
"bsd*"
"mach*"
"minix*"
"genix*"
"ultrix*"
"irix*"
"*vms*"
"esix*"
"aix*"
"cnk*"
"sunos"
"sunos[34]*"
"hpux*"
"unos*"
"osf*"
"luna*"
"dgux*"
"auroraux*"
"solaris*"
"sym*"
"kopensolaris*"
"plan9*"
"amigaos*"
"amigados*"
"msdos*"
"newsos*"
"unicos*"
"aof*"
"aos*"
"aros*"
"cloudabi*"
"sortix*"
"nindy*"
"vxsim*"
"vxworks*"
"ebmon*"
"hms*"
"mvs*"
"clix*"
"riscos*"
"uniplus*"
"iris*"
"isc*"
"rtu*"
"xenix*"
"knetbsd*"
"mirbsd*"
"netbsd*"
"bitrig*"
"openbsd*"
"solidbsd*"
"libertybsd*"
"ekkobsd*"
"kfreebsd*"
"freebsd*"
"riscix*"
"lynxos*"
"bosx*"
"nextstep*"
"cxux*"
"aout*"
"elf*"
"oabi*"
"ptx*"
"coff*"
"ecoff*"
"winnt*"
"domain*"
"vsta*"
"udi*"
"eabi*"
"lites*"
"ieee*"
"go32*"
"aux*"
"hcos*"
"chorusrdb*"
"cegcc*"
"glidix*"
"cygwin*"
"msys*"
"pe*"
"moss*"
"proelf*"
"rtems*"
"midipix*"
"mingw32*"
"mingw64*"
"linux-gnu*"
"linux-android*"
"linux-newlib*"
"linux-musl*"
"linux-uclibc*"
"uxpv*"
"beos*"
"mpeix*"
"udk*"
"moxiebox*"
"interix*"
"uwin*"
"mks*"
"rhapsody*"
"darwin*"
"openstep*"
"oskit*"
"conix*"
"pw32*"
"nonstopux*"
"storm-chaos*"
"tops10*"
"tenex*"
"tops20*"
"its*"
"os2*"
"vos*"
"palmos*"
"uclinux*"
"nucleus*"
"morphos*"
"superux*"
"rtmk*"
"windiss*"
"powermax*"
"dnix*"
"nx6"
"nx7"
"sei*"
"dragonfly*"
"skyos*"
"haiku*"
"rdos*"
"toppers*"
"drops*"
"es*"
"onefs*"
"tirtos*"
"phoenix*"
"fuchsia*"
"redox*"
"bme*"
"midnightbsd*"
"amdhsa*"
"unleashed*"
"emscripten*"
//  Remember, each alternative MUST END IN *, to match a version number.
 ;;

"qnx*"
switch ( 
cpu
 
 + /*5*/
 ) {

"x86"
"i*86"
 ;;

"*"
let 
"os"
 = 
"nto-"
os
 
 ; /*4*/
 ;;


}
 ;;

"hiux*"
let 
"os"
 = 
"hiuxwe2"
 ; /*4*/
 ;;

"nto-qnx*"
 ;;

"nto*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|nto|nto-qnx|" + /*2*/
} )
 ; /*4*/
 ;;

"sim"
"xray"
"os68k*"
"v88r*"
"windows*"
"osx"
"abug"
"netware*"
"os9*"
"macos*"
"mpw*"
"magic*"
"mmixware*"
"mon960*"
"lnews*"
 ;;

"linux-dietlibc"
let 
"os"
 = 
"linux-dietlibc"
 ; /*4*/
 ;;

"linux*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|linux|linux-gnu|" + /*2*/
} )
 ; /*4*/
 ;;

"lynx*178"
let 
"os"
 = 
"lynxos178"
 ; /*4*/
 ;;

"lynx*5"
let 
"os"
 = 
"lynxos5"
 ; /*4*/
 ;;

"lynx*"
let 
"os"
 = 
"lynxos"
 ; /*4*/
 ;;

"mac*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|mac|macos|" + /*2*/
} )
 ; /*4*/
 ;;

"opened*"
let 
"os"
 = 
"openedition"
 ; /*4*/
 ;;

"os400*"
let 
"os"
 = 
"os400"
 ; /*4*/
 ;;

"sunos5*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|sunos5|solaris2|" + /*2*/
} )
 ; /*4*/
 ;;

"sunos6*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|sunos6|solaris3|" + /*2*/
} )
 ; /*4*/
 ;;

"wince*"
let 
"os"
 = 
"wince"
 ; /*4*/
 ;;

"utek*"
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"dynix*"
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"acis*"
let 
"os"
 = 
"aos"
 ; /*4*/
 ;;

"atheos*"
let 
"os"
 = 
"atheos"
 ; /*4*/
 ;;

"syllable*"
let 
"os"
 = 
"syllable"
 ; /*4*/
 ;;

"386bsd"
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"ctix*"
"uts*"
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"nova*"
let 
"os"
 = 
"rtmk-nova"
 ; /*4*/
 ;;

"ns2"
let 
"os"
 = 
"nextstep2"
 ; /*4*/
 ;;

"nsk*"
let 
"os"
 = 
"nsk"
 ; /*4*/
 ;;

//  Preserve the version number of sinix5.
"sinix5.*"
let 
"os"
 = 
$( {
 + /*2*/"echo" + /*2*/os + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s|sinix|sysv|" + /*2*/
} )
 ; /*4*/
 ;;

"sinix*"
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"tpf*"
let 
"os"
 = 
"tpf"
 ; /*4*/
 ;;

"triton*"
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"oss*"
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"svr4*"
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"svr3"
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"sysvr4"
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

//  This must come after sysvr4.
"sysv*"
 ;;

"ose*"
let 
"os"
 = 
"ose"
 ; /*4*/
 ;;

"*mint"
"mint[0-9]*"
"*MiNT"
"MiNT[0-9]*"
let 
"os"
 = 
"mint"
 ; /*4*/
 ;;

"zvmoe"
let 
"os"
 = 
"zvmoe"
 ; /*4*/
 ;;

"dicos*"
let 
"os"
 = 
"dicos"
 ; /*4*/
 ;;

"pikeos*"
//  Until real need of OS specific support for
//  particular features comes up, bare metal
//  configurations are quite functional.
switch ( 
cpu
 
 + /*5*/
 ) {

"arm*"
let 
"os"
 = 
"eabi"
 ; /*4*/
 ;;

"*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;


}
 ;;

"nacl*"
 ;;

"ios"
 ;;

"none"
 ;;

"*-eabi"
 ;;

"*"
"echo"
"Invalid"
"configuration"
"\\`"
process.argv[1]
 
"\\':"
"system"
"\\`"
os
 
"\\'"
"not"
"recognized"
"1"
 >& 
"2"
"exit"
"1"
 ;;


}

} 
 else {

if ( 
 ) 
{

//  Here we handle the default operating systems that come with various machines.
//  The value should be what the vendor currently ships out the door with their
//  machine or put another way, the most popular os provided with the machine.
//  Note that if you're going to try to match "-MANUFACTURER" here (say,
//  "-sun"), then you have to tell the case statement up towards the top
//  that MANUFACTURER isn't an operating system.  Otherwise, code above
//  will signal an error saying that MANUFACTURER isn't an operating
//  system, and we'll never get to this point.
switch ( 
cpu
 
"-"
vendor
 
 + /*5*/
 ) {

"score-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"spu-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"*-acorn"
let 
"os"
 = 
"riscix1.2"
 ; /*4*/
 ;;

"arm*-rebel"
let 
"os"
 = 
"linux"
 ; /*4*/
 ;;

"arm*-semi"
let 
"os"
 = 
"aout"
 ; /*4*/
 ;;

"c4x-*"
"tic4x-*"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"c8051-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"clipper-intergraph"
let 
"os"
 = 
"clix"
 ; /*4*/
 ;;

"hexagon-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"tic54x-*"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"tic55x-*"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"tic6x-*"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

//  This must come before the *-dec entry.
"pdp10-*"
let 
"os"
 = 
"tops20"
 ; /*4*/
 ;;

"pdp11-*"
let 
"os"
 = 
"none"
 ; /*4*/
 ;;

"*-dec"
"vax-*"
let 
"os"
 = 
"ultrix4.2"
 ; /*4*/
 ;;

"m68*-apollo"
let 
"os"
 = 
"domain"
 ; /*4*/
 ;;

"i386-sun"
let 
"os"
 = 
"sunos4.0.2"
 ; /*4*/
 ;;

"m68000-sun"
let 
"os"
 = 
"sunos3"
 ; /*4*/
 ;;

"m68*-cisco"
let 
"os"
 = 
"aout"
 ; /*4*/
 ;;

"mep-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"mips*-cisco"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"mips*-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"or32-*"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"*-tti"
//  must be before sparc entry or we get the wrong os.
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"sparc-*"
"*-sun"
let 
"os"
 = 
"sunos4.1.1"
 ; /*4*/
 ;;

"pru-*"
let 
"os"
 = 
"elf"
 ; /*4*/
 ;;

"*-be"
let 
"os"
 = 
"beos"
 ; /*4*/
 ;;

"*-ibm"
let 
"os"
 = 
"aix"
 ; /*4*/
 ;;

"*-knuth"
let 
"os"
 = 
"mmixware"
 ; /*4*/
 ;;

"*-wec"
let 
"os"
 = 
"proelf"
 ; /*4*/
 ;;

"*-winbond"
let 
"os"
 = 
"proelf"
 ; /*4*/
 ;;

"*-oki"
let 
"os"
 = 
"proelf"
 ; /*4*/
 ;;

"*-hp"
let 
"os"
 = 
"hpux"
 ; /*4*/
 ;;

"*-hitachi"
let 
"os"
 = 
"hiux"
 ; /*4*/
 ;;

"i860-*"
"*-att"
"*-ncr"
"*-altos"
"*-motorola"
"*-convergent"
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"*-cbm"
let 
"os"
 = 
"amigaos"
 ; /*4*/
 ;;

"*-dg"
let 
"os"
 = 
"dgux"
 ; /*4*/
 ;;

"*-dolphin"
let 
"os"
 = 
"sysv3"
 ; /*4*/
 ;;

"m68k-ccur"
let 
"os"
 = 
"rtu"
 ; /*4*/
 ;;

"m88k-omron*"
let 
"os"
 = 
"luna"
 ; /*4*/
 ;;

"*-next"
let 
"os"
 = 
"nextstep"
 ; /*4*/
 ;;

"*-sequent"
let 
"os"
 = 
"ptx"
 ; /*4*/
 ;;

"*-crds"
let 
"os"
 = 
"unos"
 ; /*4*/
 ;;

"*-ns"
let 
"os"
 = 
"genix"
 ; /*4*/
 ;;

"i370-*"
let 
"os"
 = 
"mvs"
 ; /*4*/
 ;;

"*-gould"
let 
"os"
 = 
"sysv"
 ; /*4*/
 ;;

"*-highlevel"
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"*-encore"
let 
"os"
 = 
"bsd"
 ; /*4*/
 ;;

"*-sgi"
let 
"os"
 = 
"irix"
 ; /*4*/
 ;;

"*-siemens"
let 
"os"
 = 
"sysv4"
 ; /*4*/
 ;;

"*-masscomp"
let 
"os"
 = 
"rtu"
 ; /*4*/
 ;;

"f30[01]-fujitsu"
"f700-fujitsu"
let 
"os"
 = 
"uxpv"
 ; /*4*/
 ;;

"*-rom68k"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"*-*bug"
let 
"os"
 = 
"coff"
 ; /*4*/
 ;;

"*-apple"
let 
"os"
 = 
"macos"
 ; /*4*/
 ;;

"*-atari*"
let 
"os"
 = 
"mint"
 ; /*4*/
 ;;

"*-wrs"
let 
"os"
 = 
"vxworks"
 ; /*4*/
 ;;

"*"
let 
"os"
 = 
"none"
 ; /*4*/
 ;;


}

} 
 else {


} 

} 
//  Here we handle the case where we know the os, and the CPU type, but not the
//  manufacturer.  We pick the logical manufacturer.
switch ( 
vendor
 
 + /*5*/
 ) {

"unknown"
switch ( 
os
 
 + /*5*/
 ) {

"riscix*"
let 
"vendor"
 = 
"acorn"
 ; /*4*/
 ;;

"sunos*"
let 
"vendor"
 = 
"sun"
 ; /*4*/
 ;;

"cnk*"
"-aix*"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"beos*"
let 
"vendor"
 = 
"be"
 ; /*4*/
 ;;

"hpux*"
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"mpeix*"
let 
"vendor"
 = 
"hp"
 ; /*4*/
 ;;

"hiux*"
let 
"vendor"
 = 
"hitachi"
 ; /*4*/
 ;;

"unos*"
let 
"vendor"
 = 
"crds"
 ; /*4*/
 ;;

"dgux*"
let 
"vendor"
 = 
"dg"
 ; /*4*/
 ;;

"luna*"
let 
"vendor"
 = 
"omron"
 ; /*4*/
 ;;

"genix*"
let 
"vendor"
 = 
"ns"
 ; /*4*/
 ;;

"clix*"
let 
"vendor"
 = 
"intergraph"
 ; /*4*/
 ;;

"mvs*"
"opened*"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"os400*"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"ptx*"
let 
"vendor"
 = 
"sequent"
 ; /*4*/
 ;;

"tpf*"
let 
"vendor"
 = 
"ibm"
 ; /*4*/
 ;;

"vxsim*"
"vxworks*"
"windiss*"
let 
"vendor"
 = 
"wrs"
 ; /*4*/
 ;;

"aux*"
let 
"vendor"
 = 
"apple"
 ; /*4*/
 ;;

"hms*"
let 
"vendor"
 = 
"hitachi"
 ; /*4*/
 ;;

"mpw*"
"macos*"
let 
"vendor"
 = 
"apple"
 ; /*4*/
 ;;

"*mint"
"mint[0-9]*"
"*MiNT"
"MiNT[0-9]*"
let 
"vendor"
 = 
"atari"
 ; /*4*/
 ;;

"vos*"
let 
"vendor"
 = 
"stratus"
 ; /*4*/
 ;;


}
 ;;


}
"echo"
cpu
 
"-"
vendor
 
"-"
os
 
"exit"
//  Local variables:
//  eval: (add-hook 'before-save-hook 'time-stamp)
//  time-stamp-start: "timestamp='"
//  time-stamp-format: "%:y-%02m-%02d"
//  time-stamp-end: "'"
//  End: