/*doFile -> {"Name":"config.guess"}*/

//  Attempt to guess a canonical system name.
//    Copyright 1992-2019 Free Software Foundation, Inc.
let 
"timestamp"
 = 
"2019-02-19"
 ; /*4*/
//  This file is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
// 
//  This program is distributed in the hope that it will be useful, but
//  WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
// 
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, see <https://www.gnu.org/licenses/>.
// 
//  As a special exception to the GNU General Public License, if you
//  distribute this file as part of a program that contains a
//  configuration script generated by Autoconf, you may include it under
//  the same distribution terms that you use for the rest of that
//  program.  This Exception is an additional permission under section 7
//  of the GNU General Public License, version 3 ("GPLv3").
// 
//  Originally written by Per Bothner; maintained since 2000 by Ben Elliston.
// 
//  You can get the latest version of this script from:
//  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess
// 
//  Please send patches to <config-patches@gnu.org>.
let 
"me"
 = 
$( {
 + /*2*/"echo" + /*2*/process.argv0 + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s,.*/,," + /*2*/
} )
 ; /*4*/
let 
"usage"
 = 
"\\\nUsage: "
process.argv0
 
" [OPTION]\n\nOutput the configuration name of the system \\`"
me
 
"' is run on.\n\nOptions:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>."
 ; /*4*/
let 
"version"
 = 
"\\\nGNU config.guess ("
timestamp
 
")\n\nOriginally written by Per Bothner.\nCopyright 1992-2019 Free Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
 ; /*4*/
let 
"help"
 = 
"\nTry \\`"
me
 
" --help' for more information."
 ; /*4*/
//  Parse command line
while (
"test"
process.argv.length
 
"-gt"
"0"
) {

switch ( 
process.argv[1]
 
 + /*5*/
 ) {

"--time-stamp"
"--time*"
"-t"
"echo"
timestamp
 
"exit"
 ;;

"--version"
"-v"
"echo"
version
 
"exit"
 ;;

"--help"
"--h*"
"-h"
"echo"
usage
 
"exit"
 ;;

"--"
//  Stop option processing
"shift"
"break"
 ;;

"-"
//  Use stdin as input.
"break"
 ;;

"-*"
"echo"
me
 
": invalid option "
process.argv[1]
 
help
 
 >& 
"2"
"exit"
"1"
 ;;

"*"
"break"
 ;;


}

}
if ( 
"test"
process.argv.length
 
"!="
"0"
 ) 
{

"echo"
me
 
": too many arguments"
help
 
 >& 
"2"
"exit"
"1"

} 
 else {


} 
//  CC_FOR_BUILD -- compiler used by this script. Note that the use of a
//  compiler to aid in system detection is discouraged as it requires
//  temporary files to be created and, as you can see below, it is a
//  headache to deal with in a portable fashion.
//  Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still
//  use `HOST_CC' if defined, but it is deprecated.
//  Portable tmp directory creation inspired by the Autoconf team.
let 
"tmp"
 = 
 ; /*4*/
//  shellcheck disable=SC2172
"trap"
"test -z \"$tmp\" || rm -fr \"$tmp\""
"0"
"1"
"2"
"13"
"15"
function 
"set_cc_for_build"
 () {

":"
(
TMPDIR
 =  "/tmp"
)
 
//  shellcheck disable=SC2039
{

{

{

{

{

let 
"tmp"
 = 
$(  (  + /*2*/{
 + /*2*/"umask" + /*2*/"077" + /*2*/ &&  + /*2*/"mktemp" + /*2*/"-d" + /*2*/TMPDIR + /*2*/  + /*2*/"/cgXXXXXX" + /*2*/
} + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
 && 
"test"
"-n"
tmp
 

}
 && 
"test"
"-d"
tmp
 

}
 ;//3

 || 
{

{

"test"
"-n"
RANDOM
 
 && 
let 
"tmp"
 = 
TMPDIR
 
"/cg"
process.pid
 
"-"
RANDOM
 
 ; /*4*/

}
 && 
 ( 
{

"umask"
"077"
 && 
"mkdir"
tmp
 
"2"
 > 
"/dev/null"

}
 
 ) 

}
 ;//3


}
 || 
{

{

let 
"tmp"
 = 
TMPDIR
 
"/cg-"
process.pid
 
 ; /*4*/
 && 
 ( 
{

"umask"
"077"
 && 
"mkdir"
tmp
 
"2"
 > 
"/dev/null"

}
 
 ) 

}
 && 
"echo"
"Warning: creating insecure temp directory"
 >& 
"2"

}
 ;//3


}
 || 
"echo"
me
 
": cannot create a temporary directory in "
TMPDIR
 
 >& 
"2"
"exit"
"1"
 ;//3


}
let 
"dummy"
 = 
tmp
 
"/dummy"
 ; /*4*/
switch ( 
(
CC_FOR_BUILD
 - 
)
 
","
(
HOST_CC
 - 
)
 
","
(
CC
 - 
)
 
 + /*5*/
 ) {

",,"
"echo"
"int x;"
 > 
dummy
 
".c"
for
(const 
"driver"
 of [ 
"cc"
"gcc"
"c89"
"c99"
 , 
 ])
{

if ( 
 ( 
driver
 
"-c"
"-o"
dummy
 
".o"
dummy
 
".c"
 
 ) 
 > 
"/dev/null"
"2"
 >& 
"1"
 ) 
{

let 
"CC_FOR_BUILD"
 = 
driver
 
 ; /*4*/
"break"

} 
 else {


} 

}
if ( 
"test"
"x"
CC_FOR_BUILD
 
"="
"x"
 ) 
{

let 
"CC_FOR_BUILD"
 = 
"no_compiler_found"
 ; /*4*/

} 
 else {


} 
 ;;

",,*"
let 
"CC_FOR_BUILD"
 = 
CC
 
 ; /*4*/
 ;;

",*,*"
let 
"CC_FOR_BUILD"
 = 
HOST_CC
 
 ; /*4*/
 ;;


}
 ;//3


}
//  This is needed to find uname on a Pyramid OSx when run in the BSD universe.
//  (ghazi@noc.rutgers.edu 1994-08-24)
if ( 
"test"
"-f"
"/.attbin/uname"
 ) 
{

let 
"PATH"
 = 
PATH
 
":/.attbin"
 ; /*4*/
"export"
"PATH"

} 
 else {


} 
{

let 
"UNAME_MACHINE"
 = 
$(  (  + /*2*/"uname" + /*2*/"-m" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
 || 
let 
"UNAME_MACHINE"
 = 
"unknown"
 ; /*4*/

}
{

let 
"UNAME_RELEASE"
 = 
$(  (  + /*2*/"uname" + /*2*/"-r" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
 || 
let 
"UNAME_RELEASE"
 = 
"unknown"
 ; /*4*/

}
{

let 
"UNAME_SYSTEM"
 = 
$(  (  + /*2*/"uname" + /*2*/"-s" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
 || 
let 
"UNAME_SYSTEM"
 = 
"unknown"
 ; /*4*/

}
{

let 
"UNAME_VERSION"
 = 
$(  (  + /*2*/"uname" + /*2*/"-v" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
 || 
let 
"UNAME_VERSION"
 = 
"unknown"
 ; /*4*/

}
switch ( 
UNAME_SYSTEM
 
 + /*5*/
 ) {

"Linux"
"GNU"
"GNU/*"
//  If the system lacks a compiler, then just pick glibc.
//  We could probably try harder.
let 
"LIBC"
 = 
"gnu"
 ; /*4*/
"set_cc_for_build"
"cat"
 <<- 
"EOF"
"\t#include <features.h>\n\t#if defined(__UCLIBC__)\n\tLIBC=uclibc\n\t#elif defined(__dietlibc__)\n\tLIBC=dietlibc\n\t#else\n\tLIBC=gnu\n\t#endif\n\t"
 > 
dummy
 
".c"
"eval"
$( {
 + /*2*/{
 + /*2*/CC_FOR_BUILD + /*2*/  + /*2*/"-E" + /*2*/dummy + /*2*/  + /*2*/".c" + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ |  + /*2*/"grep" + /*2*/"^LIBC" + /*2*/
} + /*2*/ |  + /*2*/"sed" + /*2*/"s, ,,g" + /*2*/
} )
//  If ldd exists, use it to detect musl libc.
if ( 
{

"command"
"-v"
"ldd"
 > 
"/dev/null"
 && 
{

"ldd"
"--version"
"2"
 >& 
"1"
 | 
"grep"
"-q"
"^musl"

}

}
 ) 
{

let 
"LIBC"
 = 
"musl"
 ; /*4*/

} 
 else {


} 
 ;;


}
//  Note: order is significant - the case branches are not exclusive.
switch ( 
UNAME_MACHINE
 
":"
UNAME_SYSTEM
 
":"
UNAME_RELEASE
 
":"
UNAME_VERSION
 
 + /*5*/
 ) {

"*:NetBSD:*:*"
//  NetBSD (nbsd) targets should (where applicable) match one or
//  more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,
//  *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently
//  switched to ELF, *-*-netbsd* would select the old
//  object file format.  This provides both forward
//  compatibility and a consistent mechanism for selecting the
//  object file format.
// 
//  Note: NetBSD doesn't particularly care about the vendor
//  portion of the name.  We always set it to "unknown".
let 
"sysctl"
 = 
"sysctl -n hw.machine_arch"
 ; /*4*/
let 
"UNAME_MACHINE_ARCH"
 = 
$(  (  + /*2*/{
 + /*2*/{
 + /*2*/{
 + /*2*/"uname" + /*2*/"-p" + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ ||  + /*2*/"/sbin/" + /*2*/sysctl + /*2*/  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/
} + /*2*/ ||  + /*2*/"/usr/sbin/" + /*2*/sysctl + /*2*/  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/
} + /*2*/ ||  + /*2*/"echo" + /*2*/"unknown" + /*2*/
} + /*2*/  + /*2*/ )  )
 ; /*4*/
switch ( 
UNAME_MACHINE_ARCH
 
 + /*5*/
 ) {

"armeb"
let 
"machine"
 = 
"armeb-unknown"
 ; /*4*/
 ;;

"arm*"
let 
"machine"
 = 
"arm-unknown"
 ; /*4*/
 ;;

"sh3el"
let 
"machine"
 = 
"shl-unknown"
 ; /*4*/
 ;;

"sh3eb"
let 
"machine"
 = 
"sh-unknown"
 ; /*4*/
 ;;

"sh5el"
let 
"machine"
 = 
"sh5le-unknown"
 ; /*4*/
 ;;

"earmv*"
let 
"arch"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_MACHINE_ARCH + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s,^e\\(armv[0-9]\\).*$,\\1," + /*2*/
} )
 ; /*4*/
let 
"endian"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_MACHINE_ARCH + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-ne" + /*2*/"s,^.*\\(eb\\)$,\\1,p" + /*2*/
} )
 ; /*4*/
let 
"machine"
 = 
(
arch
)
 
(
endian
)
 
"-unknown"
 ; /*4*/
 ;;

"*"
let 
"machine"
 = 
UNAME_MACHINE_ARCH
 
"-unknown"
 ; /*4*/
 ;;


}
//  The Operating System including object format, if it has switched
//  to ELF recently (or will in the future) and ABI.
switch ( 
UNAME_MACHINE_ARCH
 
 + /*5*/
 ) {

"earm*"
let 
"os"
 = 
"netbsdelf"
 ; /*4*/
 ;;

"arm*"
"i386"
"m68k"
"ns32k"
"sh3*"
"sparc"
"vax"
"set_cc_for_build"
if ( 
{

{

"echo"
"__ELF__"
 | 
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"

}
 | 
"grep"
"-q"
"__ELF__"

}
 ) 
{

//  Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).
//  Return netbsd for either.  FIX?
let 
"os"
 = 
"netbsd"
 ; /*4*/

} 
 else {

if ( 
 ) 
{

let 
"os"
 = 
"netbsdelf"
 ; /*4*/

} 
 else {


} 

} 
 ;;

"*"
let 
"os"
 = 
"netbsd"
 ; /*4*/
 ;;


}
//  Determine ABI tags.
switch ( 
UNAME_MACHINE_ARCH
 
 + /*5*/
 ) {

"earm*"
let 
"expr"
 = 
"s/^earmv[0-9]/-eabi/;s/eb$//"
 ; /*4*/
let 
"abi"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_MACHINE_ARCH + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/expr + /*2*/  + /*2*/
} )
 ; /*4*/
 ;;


}
//  The OS release
//  Debian GNU/NetBSD machines have a different userland, and
//  thus, need a distinct triplet. However, they do not need
//  kernel version information, so it can be replaced with a
//  suitable tag, in the style of linux-gnu.
switch ( 
UNAME_VERSION
 
 + /*5*/
 ) {

"Debian*"
let 
"release"
 = 
"-gnu"
 ; /*4*/
 ;;

"*"
let 
"release"
 = 
$( {
 + /*2*/{
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[-_].*//" + /*2*/
} + /*2*/ |  + /*2*/"cut" + /*2*/"-d." + /*2*/"-f1,2" + /*2*/
} )
 ; /*4*/
 ;;


}
//  Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:
//  contains redundant information, the shorter form:
//  CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.
"echo"
machine
 
"-"
(
os
)
 
(
release
)
 
(
abi
 - 
)
 
"exit"
 ;;

"*:Bitrig:*:*"
let 
"UNAME_MACHINE_ARCH"
 = 
$( {
 + /*2*/"arch" + /*2*/ |  + /*2*/"sed" + /*2*/"s/Bitrig.//" + /*2*/
} )
 ; /*4*/
"echo"
UNAME_MACHINE_ARCH
 
"-unknown-bitrig"
UNAME_RELEASE
 
"exit"
 ;;

"*:OpenBSD:*:*"
let 
"UNAME_MACHINE_ARCH"
 = 
$( {
 + /*2*/"arch" + /*2*/ |  + /*2*/"sed" + /*2*/"s/OpenBSD.//" + /*2*/
} )
 ; /*4*/
"echo"
UNAME_MACHINE_ARCH
 
"-unknown-openbsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:LibertyBSD:*:*"
let 
"UNAME_MACHINE_ARCH"
 = 
$( {
 + /*2*/"arch" + /*2*/ |  + /*2*/"sed" + /*2*/"s/^.*BSD\\.//" + /*2*/
} )
 ; /*4*/
"echo"
UNAME_MACHINE_ARCH
 
"-unknown-libertybsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:MidnightBSD:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-midnightbsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:ekkoBSD:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-ekkobsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:SolidBSD:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-solidbsd"
UNAME_RELEASE
 
"exit"
 ;;

"macppc:MirBSD:*:*"
"echo"
"powerpc-unknown-mirbsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:MirBSD:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-mirbsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:Sortix:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-sortix"
"exit"
 ;;

"*:Redox:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-redox"
"exit"
 ;;

"mips:OSF1:*.*"
"echo"
"mips-dec-osf1"
"exit"
 ;;

"alpha:OSF1:*:*"
switch ( 
UNAME_RELEASE
 
 + /*5*/
 ) {

"*4.0"
let 
"UNAME_RELEASE"
 = 
$( {
 + /*2*/"/usr/sbin/sizer" + /*2*/"-v" + /*2*/ |  + /*2*/"awk" + /*2*/"{print $3}" + /*2*/
} )
 ; /*4*/
 ;;

"*5.*"
let 
"UNAME_RELEASE"
 = 
$( {
 + /*2*/"/usr/sbin/sizer" + /*2*/"-v" + /*2*/ |  + /*2*/"awk" + /*2*/"{print $4}" + /*2*/
} )
 ; /*4*/
 ;;


}
//  According to Compaq, /usr/sbin/psrinfo has been available on
//  OSF/1 and Tru64 systems produced since 1995.  I hope that
//  covers most systems running today.  This code pipes the CPU
//  types through head -n 1, so we only detect the type of CPU 0.
let 
"ALPHA_CPU_TYPE"
 = 
$( {
 + /*2*/{
 + /*2*/"/usr/sbin/psrinfo" + /*2*/"-v" + /*2*/ |  + /*2*/"sed" + /*2*/"-n" + /*2*/"-e" + /*2*/"s/^  The alpha \\(.*\\) processor.*$/\\1/p" + /*2*/
} + /*2*/ |  + /*2*/"head" + /*2*/"-n" + /*2*/"1" + /*2*/
} )
 ; /*4*/
switch ( 
ALPHA_CPU_TYPE
 
 + /*5*/
 ) {

"EV4 (21064)"
let 
"UNAME_MACHINE"
 = 
"alpha"
 ; /*4*/
 ;;

"EV4.5 (21064)"
let 
"UNAME_MACHINE"
 = 
"alpha"
 ; /*4*/
 ;;

"LCA4 (21066/21068)"
let 
"UNAME_MACHINE"
 = 
"alpha"
 ; /*4*/
 ;;

"EV5 (21164)"
let 
"UNAME_MACHINE"
 = 
"alphaev5"
 ; /*4*/
 ;;

"EV5.6 (21164A)"
let 
"UNAME_MACHINE"
 = 
"alphaev56"
 ; /*4*/
 ;;

"EV5.6 (21164PC)"
let 
"UNAME_MACHINE"
 = 
"alphapca56"
 ; /*4*/
 ;;

"EV5.7 (21164PC)"
let 
"UNAME_MACHINE"
 = 
"alphapca57"
 ; /*4*/
 ;;

"EV6 (21264)"
let 
"UNAME_MACHINE"
 = 
"alphaev6"
 ; /*4*/
 ;;

"EV6.7 (21264A)"
let 
"UNAME_MACHINE"
 = 
"alphaev67"
 ; /*4*/
 ;;

"EV6.8CB (21264C)"
let 
"UNAME_MACHINE"
 = 
"alphaev68"
 ; /*4*/
 ;;

"EV6.8AL (21264B)"
let 
"UNAME_MACHINE"
 = 
"alphaev68"
 ; /*4*/
 ;;

"EV6.8CX (21264D)"
let 
"UNAME_MACHINE"
 = 
"alphaev68"
 ; /*4*/
 ;;

"EV6.9A (21264/EV69A)"
let 
"UNAME_MACHINE"
 = 
"alphaev69"
 ; /*4*/
 ;;

"EV7 (21364)"
let 
"UNAME_MACHINE"
 = 
"alphaev7"
 ; /*4*/
 ;;

"EV7.9 (21364A)"
let 
"UNAME_MACHINE"
 = 
"alphaev79"
 ; /*4*/
 ;;


}
//  A Pn.n version is a patched version.
//  A Vn.n version is a released version.
//  A Tn.n version is a released field test version.
//  A Xn.n version is an unreleased experimental baselevel.
//  1.2 uses "1.2" for uname -r.
"echo"
UNAME_MACHINE
 
"-dec-osf"
$( {
 + /*2*/{
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/^[PVTX]//" + /*2*/
} + /*2*/ |  + /*2*/"tr" + /*2*/"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + /*2*/"abcdefghijklmnopqrstuvwxyz" + /*2*/
} )
//  Reset EXIT trap before exiting to avoid spurious non-zero exit code.
let 
"exitcode"
 = 
process.exitCode
 
 ; /*4*/
"trap"
""
"0"
"exit"
exitcode
 
 ;;

"Amiga*:UNIX_System_V:4.0:*"
"echo"
"m68k-unknown-sysv4"
"exit"
 ;;

"*:[Aa]miga[Oo][Ss]:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-amigaos"
"exit"
 ;;

"*:[Mm]orph[Oo][Ss]:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-morphos"
"exit"
 ;;

"*:OS/390:*:*"
"echo"
"i370-ibm-openedition"
"exit"
 ;;

"*:z/VM:*:*"
"echo"
"s390-ibm-zvmoe"
"exit"
 ;;

"*:OS400:*:*"
"echo"
"powerpc-ibm-os400"
"exit"
 ;;

"arm:RISC*:1.[012]*:*"
"arm:riscix:1.[012]*:*"
"echo"
"arm-acorn-riscix"
UNAME_RELEASE
 
"exit"
 ;;

"arm*:riscos:*:*"
"arm*:RISCOS:*:*"
"echo"
"arm-unknown-riscos"
"exit"
 ;;

"SR2?01:HI-UX/MPP:*:*"
"SR8000:HI-UX/MPP:*:*"
"echo"
"hppa1.1-hitachi-hiuxmpp"
"exit"
 ;;

"Pyramid*:OSx*:*:*"
"MIS*:OSx*:*:*"
"MIS*:SMP_DC-OSx*:*:*"
//  akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.
if ( 
"test"
$(  (  + /*2*/"/bin/universe" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"="
"att"
 ) 
{

"echo"
"pyramid-pyramid-sysv3"

} 
 else {

if ( 
 ) 
{

"echo"
"pyramid-pyramid-bsd"

} 
 else {


} 

} 
"exit"
 ;;

"NILE*:*:*:dcosx"
"echo"
"pyramid-pyramid-svr4"
"exit"
 ;;

"DRS?6000:unix:4.0:6*"
"echo"
"sparc-icl-nx6"
"exit"
 ;;

"DRS?6000:UNIX_SV:4.2*:7*"
"DRS?6000:isis:4.2*:7*"
switch ( 
$( "/usr/bin/uname" + /*2*/"-p" )
 + /*5*/
 ) {

"sparc"
"echo"
"sparc-icl-nx7"
"exit"
 ;;


}
 ;;

"s390x:SunOS:*:*"
"echo"
UNAME_MACHINE
 
"-ibm-solaris2"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*//" + /*2*/
} )
"exit"
 ;;

"sun4H:SunOS:5.*:*"
"echo"
"sparc-hal-solaris2"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*//" + /*2*/
} )
"exit"
 ;;

"sun4*:SunOS:5.*:*"
"tadpole*:SunOS:5.*:*"
"echo"
"sparc-sun-solaris2"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*//" + /*2*/
} )
"exit"
 ;;

"i86pc:AuroraUX:5.*:*"
"i86xen:AuroraUX:5.*:*"
"echo"
"i386-pc-auroraux"
UNAME_RELEASE
 
"exit"
 ;;

"i86pc:SunOS:5.*:*"
"i86xen:SunOS:5.*:*"
"set_cc_for_build"
let 
"SUN_ARCH"
 = 
"i386"
 ; /*4*/
//  If there is a compiler, see if it is configured for 64-bit objects.
//  Note that the Sun cc does not turn __LP64__ into 1 like gcc does.
//  This test works for both compilers.
if ( 
"["
CC_FOR_BUILD
 
"!="
"no_compiler_found"
"]"
 ) 
{

if ( 
{

{

 ( 
"echo"
"#ifdef __amd64"
"echo"
"IS_64BIT_ARCH"
"echo"
"#endif"
 
 ) 
 | 
 ( 
let 
"CCOPTS"
 = 
 ; /*4*/
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"
 
 ) 

}
 | 
"grep"
"IS_64BIT_ARCH"
 > 
"/dev/null"

}
 ) 
{

let 
"SUN_ARCH"
 = 
"x86_64"
 ; /*4*/

} 
 else {


} 

} 
 else {


} 
"echo"
SUN_ARCH
 
"-pc-solaris2"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*//" + /*2*/
} )
"exit"
 ;;

"sun4*:SunOS:6*:*"
//  According to config.sub, this is the proper way to canonicalize
//  SunOS6.  Hard to guess exactly what SunOS6 will be like, but
//  it's likely to be more like Solaris than SunOS4.
"echo"
"sparc-sun-solaris3"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*//" + /*2*/
} )
"exit"
 ;;

"sun4*:SunOS:*:*"
switch ( 
$( "/usr/bin/arch" + /*2*/"-k" )
 + /*5*/
 ) {

"Series*"
"S4*"
let 
"UNAME_RELEASE"
 = 
$( "uname" + /*2*/"-v" )
 ; /*4*/
 ;;


}
//  Japanese Language versions have a version number like `4.1.3-JL'.
"echo"
"sparc-sun-sunos"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/-/_/" + /*2*/
} )
"exit"
 ;;

"sun3*:SunOS:*:*"
"echo"
"m68k-sun-sunos"
UNAME_RELEASE
 
"exit"
 ;;

"sun*:*:4.2BSD:*"
let 
"UNAME_RELEASE"
 = 
$(  (  + /*2*/{
 + /*2*/"sed" + /*2*/"1q" + /*2*/"/etc/motd" + /*2*/ |  + /*2*/"awk" + /*2*/"{print substr($5,1,3)}" + /*2*/
} + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
{

"test"
"x"
UNAME_RELEASE
 
"="
"x"
 && 
let 
"UNAME_RELEASE"
 = 
"3"
 ; /*4*/

}
switch ( 
$( "/bin/arch" )
 + /*5*/
 ) {

"sun3"
"echo"
"m68k-sun-sunos"
UNAME_RELEASE
 
 ;;

"sun4"
"echo"
"sparc-sun-sunos"
UNAME_RELEASE
 
 ;;


}
"exit"
 ;;

"aushp:SunOS:*:*"
"echo"
"sparc-auspex-sunos"
UNAME_RELEASE
 
"exit"
 ;;

//  The situation for MiNT is a little confusing.  The machine name
//  can be virtually everything (everything which is not
//  "atarist" or "atariste" at least should have a processor
//  > m68000).  The system name ranges from "MiNT" over "FreeMiNT"
//  to the lowercase version "mint" (or "freemint").  Finally
//  the system name "TOS" denotes a system which is actually not
//  MiNT.  But MiNT is downward compatible to TOS, so this should
//  be no problem.
"atarist[e]:*MiNT:*:*"
"atarist[e]:*mint:*:*"
"atarist[e]:*TOS:*:*"
"echo"
"m68k-atari-mint"
UNAME_RELEASE
 
"exit"
 ;;

"atari*:*MiNT:*:*"
"atari*:*mint:*:*"
"atarist[e]:*TOS:*:*"
"echo"
"m68k-atari-mint"
UNAME_RELEASE
 
"exit"
 ;;

"*falcon*:*MiNT:*:*"
"*falcon*:*mint:*:*"
"*falcon*:*TOS:*:*"
"echo"
"m68k-atari-mint"
UNAME_RELEASE
 
"exit"
 ;;

"milan*:*MiNT:*:*"
"milan*:*mint:*:*"
"*milan*:*TOS:*:*"
"echo"
"m68k-milan-mint"
UNAME_RELEASE
 
"exit"
 ;;

"hades*:*MiNT:*:*"
"hades*:*mint:*:*"
"*hades*:*TOS:*:*"
"echo"
"m68k-hades-mint"
UNAME_RELEASE
 
"exit"
 ;;

"*:*MiNT:*:*"
"*:*mint:*:*"
"*:*TOS:*:*"
"echo"
"m68k-unknown-mint"
UNAME_RELEASE
 
"exit"
 ;;

"m68k:machten:*:*"
"echo"
"m68k-apple-machten"
UNAME_RELEASE
 
"exit"
 ;;

"powerpc:machten:*:*"
"echo"
"powerpc-apple-machten"
UNAME_RELEASE
 
"exit"
 ;;

"RISC*:Mach:*:*"
"echo"
"mips-dec-mach_bsd4.3"
"exit"
 ;;

"RISC*:ULTRIX:*:*"
"echo"
"mips-dec-ultrix"
UNAME_RELEASE
 
"exit"
 ;;

"VAX*:ULTRIX*:*:*"
"echo"
"vax-dec-ultrix"
UNAME_RELEASE
 
"exit"
 ;;

"2020:CLIX:*:*"
"2430:CLIX:*:*"
"echo"
"clipper-intergraph-clix"
UNAME_RELEASE
 
"exit"
 ;;

"mips:*:*:UMIPS"
"mips:*:*:RISCos"
"set_cc_for_build"
"sed"
"s/^\t//"
 << 
"EOF"
"#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n#else\n\tint main (argc, argv) int argc; char *argv[]; {\n#endif\n\t#if defined (host_mips) && defined (MIPSEB)\n\t#if defined (SYSTYPE_SYSV)\n\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_SVR4)\n\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n\t#endif\n\t#endif\n\t  exit (-1);\n\t}\n"
 > 
dummy
 
".c"
{

{

{

CC_FOR_BUILD
 
"-o"
dummy
 
dummy
 
".c"
 && 
let 
"dummyarg"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-n" + /*2*/"s/\\([0-9]*\\).*/\\1/p" + /*2*/
} )
 ; /*4*/

}
 && 
let 
"SYSTEM_NAME"
 = 
$( dummy + /*2*/  + /*2*/dummyarg + /*2*/  )
 ; /*4*/

}
 && 
"echo"
SYSTEM_NAME
 
"exit"
 ;//3


}
"echo"
"mips-mips-riscos"
UNAME_RELEASE
 
"exit"
 ;;

"Motorola:PowerMAX_OS:*:*"
"echo"
"powerpc-motorola-powermax"
"exit"
 ;;

"Motorola:*:4.3:PL8-*"
"echo"
"powerpc-harris-powermax"
"exit"
 ;;

"Night_Hawk:*:*:PowerMAX_OS"
"Synergy:PowerMAX_OS:*:*"
"echo"
"powerpc-harris-powermax"
"exit"
 ;;

"Night_Hawk:Power_UNIX:*:*"
"echo"
"powerpc-harris-powerunix"
"exit"
 ;;

"m88k:CX/UX:7*:*"
"echo"
"m88k-harris-cxux7"
"exit"
 ;;

"m88k:*:4*:R4*"
"echo"
"m88k-motorola-sysv4"
"exit"
 ;;

"m88k:*:3*:R3*"
"echo"
"m88k-motorola-sysv3"
"exit"
 ;;

"AViiON:dgux:*:*"
//  DG/UX returns AViiON for all architectures
let 
"UNAME_PROCESSOR"
 = 
$( "/usr/bin/uname" + /*2*/"-p" )
 ; /*4*/
if ( 
{

"["
UNAME_PROCESSOR
 
"="
"mc88100"
"]"
 || 
"["
UNAME_PROCESSOR
 
"="
"mc88110"
"]"

}
 ) 
{

if ( 
{

"["
TARGET_BINARY_INTERFACE
 
"x"
"="
"m88kdguxelfx"
"]"
 || 
"["
TARGET_BINARY_INTERFACE
 
"x"
"="
"x"
"]"

}
 ) 
{

"echo"
"m88k-dg-dgux"
UNAME_RELEASE
 

} 
 else {

if ( 
 ) 
{

"echo"
"m88k-dg-dguxbcs"
UNAME_RELEASE
 

} 
 else {


} 

} 

} 
 else {

if ( 
 ) 
{

"echo"
"i586-dg-dgux"
UNAME_RELEASE
 

} 
 else {


} 

} 
"exit"
 ;;

"M88*:DolphinOS:*:*"
//  DolphinOS (SVR3)
"echo"
"m88k-dolphin-sysv3"
"exit"
 ;;

"M88*:*:R3*:*"
//  Delta 88k system running SVR3
"echo"
"m88k-motorola-sysv3"
"exit"
 ;;

"XD88*:*:*:*"
//  Tektronix XD88 system running UTekV (SVR3)
"echo"
"m88k-tektronix-sysv3"
"exit"
 ;;

"Tek43[0-9][0-9]:UTek:*:*"
//  Tektronix 4300 system running UTek (BSD)
"echo"
"m68k-tektronix-bsd"
"exit"
 ;;

"*:IRIX*:*:*"
"echo"
"mips-sgi-irix"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/-/_/g" + /*2*/
} )
"exit"
 ;;

//  Note that: echo "'`uname -s`'" gives 'AIX '
"????????:AIX?:[12].1:2"
//  AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.
//  uname -m gives an 8 hex-code CPU id
"echo"
"romp-ibm-aix"
"exit"
 ;;

"i*86:AIX:*:*"
"echo"
"i386-ibm-aix"
"exit"
 ;;

"ia64:AIX:*:*"
if ( 
"["
"-x"
"/usr/bin/oslevel"
"]"
 ) 
{

let 
"IBM_REV"
 = 
$( "/usr/bin/oslevel" )
 ; /*4*/

} 
 else {

if ( 
 ) 
{

let 
"IBM_REV"
 = 
UNAME_VERSION
 
"."
UNAME_RELEASE
 
 ; /*4*/

} 
 else {


} 

} 
"echo"
UNAME_MACHINE
 
"-ibm-aix"
IBM_REV
 
"exit"
 ;;

"*:AIX:2:3"
if ( 
"grep"
"bos325"
"/usr/include/stdio.h"
 > 
"/dev/null"
"2"
 >& 
"1"
 ) 
{

"set_cc_for_build"
"sed"
"s/^\t\t//"
 << 
"EOF"
"\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n\t\t\t{\n\t\t\tif (!__power_pc())\n\t\t\t\texit(1);\n\t\t\tputs(\"powerpc-ibm-aix3.2.5\");\n\t\t\texit(0);\n\t\t\t}\n"
 > 
dummy
 
".c"
if ( 
{

CC_FOR_BUILD
 
"-o"
dummy
 
dummy
 
".c"
 && 
let 
"SYSTEM_NAME"
 = 
$( dummy + /*2*/  )
 ; /*4*/

}
 ) 
{

"echo"
SYSTEM_NAME
 

} 
 else {

if ( 
 ) 
{

"echo"
"rs6000-ibm-aix3.2.5"

} 
 else {


} 

} 

} 
 else {

if ( 
"grep"
"bos324"
"/usr/include/stdio.h"
 > 
"/dev/null"
"2"
 >& 
"1"
 ) 
{

"echo"
"rs6000-ibm-aix3.2.4"

} 
 else {

if ( 
 ) 
{

"echo"
"rs6000-ibm-aix3.2"

} 
 else {


} 

} 

} 
"exit"
 ;;

"*:AIX:*:[4567]"
let 
"IBM_CPU_ID"
 = 
$( {
 + /*2*/{
 + /*2*/"/usr/sbin/lsdev" + /*2*/"-C" + /*2*/"-c" + /*2*/"processor" + /*2*/"-S" + /*2*/"available" + /*2*/ |  + /*2*/"sed" + /*2*/"1q" + /*2*/
} + /*2*/ |  + /*2*/"awk" + /*2*/"{ print $1 }" + /*2*/
} )
 ; /*4*/
if ( 
{

"/usr/sbin/lsattr"
"-El"
IBM_CPU_ID
 
 | 
"grep"
" POWER"
 > 
"/dev/null"
"2"
 >& 
"1"

}
 ) 
{

let 
"IBM_ARCH"
 = 
"rs6000"
 ; /*4*/

} 
 else {

if ( 
 ) 
{

let 
"IBM_ARCH"
 = 
"powerpc"
 ; /*4*/

} 
 else {


} 

} 
if ( 
"["
"-x"
"/usr/bin/lslpp"
"]"
 ) 
{

let 
"IBM_REV"
 = 
$( {
 + /*2*/{
 + /*2*/"/usr/bin/lslpp" + /*2*/"-Lqc" + /*2*/"bos.rte.libc" + /*2*/ |  + /*2*/"awk" + /*2*/"-F:" + /*2*/"{ print $3 }" + /*2*/
} + /*2*/ |  + /*2*/"sed" + /*2*/"s/[0-9]*" + /*2*/"$" + /*2*/"/0/" + /*2*/
} )
 ; /*4*/

} 
 else {

if ( 
 ) 
{

let 
"IBM_REV"
 = 
UNAME_VERSION
 
"."
UNAME_RELEASE
 
 ; /*4*/

} 
 else {


} 

} 
"echo"
IBM_ARCH
 
"-ibm-aix"
IBM_REV
 
"exit"
 ;;

"*:AIX:*:*"
"echo"
"rs6000-ibm-aix"
"exit"
 ;;

"ibmrt:4.4BSD:*"
"romp-ibm:4.4BSD:*"
"echo"
"romp-ibm-bsd4.4"
"exit"
 ;;

//  report: romp-ibm BSD 4.3
"ibmrt:*BSD:*"
"romp-ibm:BSD:*"
//  covers RT/PC BSD and
//  4.3 with uname added to
"echo"
"romp-ibm-bsd"
UNAME_RELEASE
 
"exit"
 ;;

"*:BOSX:*:*"
"echo"
"rs6000-bull-bosx"
"exit"
 ;;

"DPX/2?00:B.O.S.:*:*"
"echo"
"m68k-bull-sysv3"
"exit"
 ;;

"9000/[34]??:4.3bsd:1.*:*"
"echo"
"m68k-hp-bsd"
"exit"
 ;;

"hp300:4.4BSD:*:*"
"9000/[34]??:4.3bsd:2.*:*"
"echo"
"m68k-hp-bsd4.4"
"exit"
 ;;

"9000/[34678]??:HP-UX:*:*"
let 
"HPUX_REV"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*.[0B]*//" + /*2*/
} )
 ; /*4*/
switch ( 
UNAME_MACHINE
 
 + /*5*/
 ) {

"9000/31?"
let 
"HP_ARCH"
 = 
"m68000"
 ; /*4*/
 ;;

"9000/[34]??"
let 
"HP_ARCH"
 = 
"m68k"
 ; /*4*/
 ;;

"9000/[678][0-9][0-9]"
if ( 
"["
"-x"
"/usr/bin/getconf"
"]"
 ) 
{

let 
"sc_cpu_version"
 = 
$( "/usr/bin/getconf" + /*2*/"SC_CPU_VERSION" + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
let 
"sc_kernel_bits"
 = 
$( "/usr/bin/getconf" + /*2*/"SC_KERNEL_BITS" + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
switch ( 
sc_cpu_version
 
 + /*5*/
 ) {

//  CPU_PA_RISC1_0
"523"
let 
"HP_ARCH"
 = 
"hppa1.0"
 ; /*4*/
 ;;

//  CPU_PA_RISC1_1
"528"
let 
"HP_ARCH"
 = 
"hppa1.1"
 ; /*4*/
 ;;

"532"
//  CPU_PA_RISC2_0
switch ( 
sc_kernel_bits
 
 + /*5*/
 ) {

"32"
let 
"HP_ARCH"
 = 
"hppa2.0n"
 ; /*4*/
 ;;

"64"
let 
"HP_ARCH"
 = 
"hppa2.0w"
 ; /*4*/
 ;;

//  HP-UX 10.20
""
let 
"HP_ARCH"
 = 
"hppa2.0"
 ; /*4*/
 ;;


}
 ;;


}

} 
 else {


} 
if ( 
"["
HP_ARCH
 
"="
"]"
 ) 
{

"set_cc_for_build"
"sed"
"s/^\t\t//"
 << 
"EOF"
"\n\t\t#define _HPUX_SOURCE\n\t\t#include <stdlib.h>\n\t\t#include <unistd.h>\n\n\t\tint main ()\n\t\t{\n\t\t#if defined(_SC_KERNEL_BITS)\n\t\t    long bits = sysconf(_SC_KERNEL_BITS);\n\t\t#endif\n\t\t    long cpu  = sysconf (_SC_CPU_VERSION);\n\n\t\t    switch (cpu)\n\t\t\t{\n\t\t\tcase CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;\n\t\t\tcase CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;\n\t\t\tcase CPU_PA_RISC2_0:\n\t\t#if defined(_SC_KERNEL_BITS)\n\t\t\t    switch (bits)\n\t\t\t\t{\n\t\t\t\tcase 64: puts (\"hppa2.0w\"); break;\n\t\t\t\tcase 32: puts (\"hppa2.0n\"); break;\n\t\t\t\tdefault: puts (\"hppa2.0\"); break;\n\t\t\t\t} break;\n\t\t#else  /* !defined(_SC_KERNEL_BITS) */\n\t\t\t    puts (\"hppa2.0\"); break;\n\t\t#endif\n\t\t\tdefault: puts (\"hppa1.0\"); break;\n\t\t\t}\n\t\t    exit (0);\n\t\t}\n"
 > 
dummy
 
".c"
{

 ( 
let 
"CCOPTS"
 = 
 ; /*4*/
CC_FOR_BUILD
 
"-o"
dummy
 
dummy
 
".c"
"2"
 > 
"/dev/null"
 
 ) 
 && 
let 
"HP_ARCH"
 = 
$( dummy + /*2*/  )
 ; /*4*/

}
{

"test"
"-z"
HP_ARCH
 
 && 
let 
"HP_ARCH"
 = 
"hppa"
 ; /*4*/

}

} 
 else {


} 
 ;;


}
if ( 
"["
HP_ARCH
 
"="
"hppa2.0w"
"]"
 ) 
{

"set_cc_for_build"
//  hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating
//  32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler
//  generating 64-bit code.  GNU and HP use different nomenclature:
// 
//  $ CC_FOR_BUILD=cc ./config.guess
//  => hppa2.0w-hp-hpux11.23
//  $ CC_FOR_BUILD="cc +DA2.0w" ./config.guess
//  => hppa64-hp-hpux11.23
if ( 
{

{

"echo"
"__LP64__"
 | 
 ( 
let 
"CCOPTS"
 = 
 ; /*4*/
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"
 
 ) 

}
 | 
"grep"
"-q"
"__LP64__"

}
 ) 
{

let 
"HP_ARCH"
 = 
"hppa2.0w"
 ; /*4*/

} 
 else {

if ( 
 ) 
{

let 
"HP_ARCH"
 = 
"hppa64"
 ; /*4*/

} 
 else {


} 

} 

} 
 else {


} 
"echo"
HP_ARCH
 
"-hp-hpux"
HPUX_REV
 
"exit"
 ;;

"ia64:HP-UX:*:*"
let 
"HPUX_REV"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*.[0B]*//" + /*2*/
} )
 ; /*4*/
"echo"
"ia64-hp-hpux"
HPUX_REV
 
"exit"
 ;;

"3050*:HI-UX:*:*"
"set_cc_for_build"
"sed"
"s/^\t//"
 << 
"EOF"
"\t#include <unistd.h>\n\tint\n\tmain ()\n\t{\n\t  long cpu = sysconf (_SC_CPU_VERSION);\n\t  /* The order matters, because CPU_IS_HP_MC68K erroneously returns\n\t     true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct\n\t     results, however.  */\n\t  if (CPU_IS_PA_RISC (cpu))\n\t    {\n\t      switch (cpu)\n\t\t{\n\t\t  case CPU_PA_RISC1_0: puts (\"hppa1.0-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC1_1: puts (\"hppa1.1-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC2_0: puts (\"hppa2.0-hitachi-hiuxwe2\"); break;\n\t\t  default: puts (\"hppa-hitachi-hiuxwe2\"); break;\n\t\t}\n\t    }\n\t  else if (CPU_IS_HP_MC68K (cpu))\n\t    puts (\"m68k-hitachi-hiuxwe2\");\n\t  else puts (\"unknown-hitachi-hiuxwe2\");\n\t  exit (0);\n\t}\n"
 > 
dummy
 
".c"
{

{

CC_FOR_BUILD
 
"-o"
dummy
 
dummy
 
".c"
 && 
let 
"SYSTEM_NAME"
 = 
$( dummy + /*2*/  )
 ; /*4*/

}
 && 
"echo"
SYSTEM_NAME
 
"exit"
 ;//3


}
"echo"
"unknown-hitachi-hiuxwe2"
"exit"
 ;;

"9000/7??:4.3bsd:*:*"
"9000/8?[79]:4.3bsd:*:*"
"echo"
"hppa1.1-hp-bsd"
"exit"
 ;;

"9000/8??:4.3bsd:*:*"
"echo"
"hppa1.0-hp-bsd"
"exit"
 ;;

"*9??*:MPE/iX:*:*"
"*3000*:MPE/iX:*:*"
"echo"
"hppa1.0-hp-mpeix"
"exit"
 ;;

"hp7??:OSF1:*:*"
"hp8?[79]:OSF1:*:*"
"echo"
"hppa1.1-hp-osf"
"exit"
 ;;

"hp8??:OSF1:*:*"
"echo"
"hppa1.0-hp-osf"
"exit"
 ;;

"i*86:OSF1:*:*"
if ( 
"["
"-x"
"/usr/sbin/sysversion"
"]"
 ) 
{

"echo"
UNAME_MACHINE
 
"-unknown-osf1mk"

} 
 else {

if ( 
 ) 
{

"echo"
UNAME_MACHINE
 
"-unknown-osf1"

} 
 else {


} 

} 
"exit"
 ;;

"parisc*:Lites*:*:*"
"echo"
"hppa1.1-hp-lites"
"exit"
 ;;

"C1*:ConvexOS:*:*"
"convex:ConvexOS:C1*:*"
"echo"
"c1-convex-bsd"
"exit"
 ;;

"C2*:ConvexOS:*:*"
"convex:ConvexOS:C2*:*"
if ( 
"getsysinfo"
"-f"
"scalar_acc"
 ) 
{

"echo"
"c32-convex-bsd"

} 
 else {

if ( 
 ) 
{

"echo"
"c2-convex-bsd"

} 
 else {


} 

} 
"exit"
 ;;

"C34*:ConvexOS:*:*"
"convex:ConvexOS:C34*:*"
"echo"
"c34-convex-bsd"
"exit"
 ;;

"C38*:ConvexOS:*:*"
"convex:ConvexOS:C38*:*"
"echo"
"c38-convex-bsd"
"exit"
 ;;

"C4*:ConvexOS:*:*"
"convex:ConvexOS:C4*:*"
"echo"
"c4-convex-bsd"
"exit"
 ;;

"CRAY*Y-MP:*:*:*"
{

"echo"
"ymp-cray-unicos"
UNAME_RELEASE
 
 | 
"sed"
"-e"
"s/\\.[^.]*$/.X/"

}
"exit"
 ;;

"CRAY*[A-Z]90:*:*:*"
{

"echo"
UNAME_MACHINE
 
"-cray-unicos"
UNAME_RELEASE
 
 | 
"sed"
"-e"
"s/CRAY.*\\([A-Z]90\\)/\\1/"
"-e"
"y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
"-e"
"s/\\.[^.]*$/.X/"

}
"exit"
 ;;

"CRAY*TS:*:*:*"
{

"echo"
"t90-cray-unicos"
UNAME_RELEASE
 
 | 
"sed"
"-e"
"s/\\.[^.]*$/.X/"

}
"exit"
 ;;

"CRAY*T3E:*:*:*"
{

"echo"
"alphaev5-cray-unicosmk"
UNAME_RELEASE
 
 | 
"sed"
"-e"
"s/\\.[^.]*$/.X/"

}
"exit"
 ;;

"CRAY*SV1:*:*:*"
{

"echo"
"sv1-cray-unicos"
UNAME_RELEASE
 
 | 
"sed"
"-e"
"s/\\.[^.]*$/.X/"

}
"exit"
 ;;

"*:UNICOS/mp:*:*"
{

"echo"
"craynv-cray-unicosmp"
UNAME_RELEASE
 
 | 
"sed"
"-e"
"s/\\.[^.]*$/.X/"

}
"exit"
 ;;

"F30[01]:UNIX_System_V:*:*"
"F700:UNIX_System_V:*:*"
let 
"FUJITSU_PROC"
 = 
$( {
 + /*2*/"uname" + /*2*/"-m" + /*2*/ |  + /*2*/"tr" + /*2*/"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + /*2*/"abcdefghijklmnopqrstuvwxyz" + /*2*/
} )
 ; /*4*/
let 
"FUJITSU_SYS"
 = 
$( {
 + /*2*/{
 + /*2*/"uname" + /*2*/"-p" + /*2*/ |  + /*2*/"tr" + /*2*/"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + /*2*/"abcdefghijklmnopqrstuvwxyz" + /*2*/
} + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/\\///" + /*2*/
} )
 ; /*4*/
let 
"FUJITSU_REL"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/ /_/" + /*2*/
} )
 ; /*4*/
"echo"
(
FUJITSU_PROC
)
 
"-fujitsu-"
(
FUJITSU_SYS
)
 
(
FUJITSU_REL
)
 
"exit"
 ;;

"5000:UNIX_System_V:4.*:*"
let 
"FUJITSU_SYS"
 = 
$( {
 + /*2*/{
 + /*2*/"uname" + /*2*/"-p" + /*2*/ |  + /*2*/"tr" + /*2*/"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + /*2*/"abcdefghijklmnopqrstuvwxyz" + /*2*/
} + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/\\///" + /*2*/
} )
 ; /*4*/
let 
"FUJITSU_REL"
 = 
$( {
 + /*2*/{
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"tr" + /*2*/"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + /*2*/"abcdefghijklmnopqrstuvwxyz" + /*2*/
} + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/ /_/" + /*2*/
} )
 ; /*4*/
"echo"
"sparc-fujitsu-"
(
FUJITSU_SYS
)
 
(
FUJITSU_REL
)
 
"exit"
 ;;

"i*86:BSD/386:*:*"
"i*86:BSD/OS:*:*"
"*:Ascend\\ Embedded/OS:*:*"
"echo"
UNAME_MACHINE
 
"-pc-bsdi"
UNAME_RELEASE
 
"exit"
 ;;

"sparc*:BSD/OS:*:*"
"echo"
"sparc-unknown-bsdi"
UNAME_RELEASE
 
"exit"
 ;;

"*:BSD/OS:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-bsdi"
UNAME_RELEASE
 
"exit"
 ;;

"arm:FreeBSD:*:*"
let 
"UNAME_PROCESSOR"
 = 
$( "uname" + /*2*/"-p" )
 ; /*4*/
"set_cc_for_build"
if ( 
{

{

"echo"
"__ARM_PCS_VFP"
 | 
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"

}
 | 
"grep"
"-q"
"__ARM_PCS_VFP"

}
 ) 
{

"echo"
(
UNAME_PROCESSOR
)
 
"-unknown-freebsd"
$( {
 + /*2*/"echo" + /*2*/( + /*2*/UNAME_RELEASE + /*2*/) + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[-(].*//" + /*2*/
} )
"-gnueabi"

} 
 else {

if ( 
 ) 
{

"echo"
(
UNAME_PROCESSOR
)
 
"-unknown-freebsd"
$( {
 + /*2*/"echo" + /*2*/( + /*2*/UNAME_RELEASE + /*2*/) + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[-(].*//" + /*2*/
} )
"-gnueabihf"

} 
 else {


} 

} 
"exit"
 ;;

"*:FreeBSD:*:*"
let 
"UNAME_PROCESSOR"
 = 
$( "/usr/bin/uname" + /*2*/"-p" )
 ; /*4*/
switch ( 
UNAME_PROCESSOR
 
 + /*5*/
 ) {

"amd64"
let 
"UNAME_PROCESSOR"
 = 
"x86_64"
 ; /*4*/
 ;;

"i386"
let 
"UNAME_PROCESSOR"
 = 
"i586"
 ; /*4*/
 ;;


}
"echo"
UNAME_PROCESSOR
 
"-unknown-freebsd"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[-(].*//" + /*2*/
} )
"exit"
 ;;

"i*:CYGWIN*:*"
"echo"
UNAME_MACHINE
 
"-pc-cygwin"
"exit"
 ;;

"*:MINGW64*:*"
"echo"
UNAME_MACHINE
 
"-pc-mingw64"
"exit"
 ;;

"*:MINGW*:*"
"echo"
UNAME_MACHINE
 
"-pc-mingw32"
"exit"
 ;;

"*:MSYS*:*"
"echo"
UNAME_MACHINE
 
"-pc-msys"
"exit"
 ;;

"i*:PW*:*"
"echo"
UNAME_MACHINE
 
"-pc-pw32"
"exit"
 ;;

"*:Interix*:*"
switch ( 
UNAME_MACHINE
 
 + /*5*/
 ) {

"x86"
"echo"
"i586-pc-interix"
UNAME_RELEASE
 
"exit"
 ;;

"authenticamd"
"genuineintel"
"EM64T"
"echo"
"x86_64-unknown-interix"
UNAME_RELEASE
 
"exit"
 ;;

"IA64"
"echo"
"ia64-unknown-interix"
UNAME_RELEASE
 
"exit"
 ;;


}
 ;;

"i*:UWIN*:*"
"echo"
UNAME_MACHINE
 
"-pc-uwin"
"exit"
 ;;

"amd64:CYGWIN*:*:*"
"x86_64:CYGWIN*:*:*"
"echo"
"x86_64-pc-cygwin"
"exit"
 ;;

"prep*:SunOS:5.*:*"
"echo"
"powerpcle-unknown-solaris2"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[^.]*//" + /*2*/
} )
"exit"
 ;;

"*:GNU:*:*"
//  the GNU system
"echo"
$( {
 + /*2*/"echo" + /*2*/UNAME_MACHINE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s,[-/].*$,," + /*2*/
} )
"-unknown-"
LIBC
 
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s,/.*$,," + /*2*/
} )
"exit"
 ;;

"*:GNU/*:*:*"
//  other systems with GNU libc and userland
"echo"
UNAME_MACHINE
 
"-unknown-"
$( {
 + /*2*/{
 + /*2*/"echo" + /*2*/UNAME_SYSTEM + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"s,^[^/]*/,," + /*2*/
} + /*2*/ |  + /*2*/"tr" + /*2*/"[:upper:]" + /*2*/"[:lower:]" + /*2*/
} )
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[-(].*//" + /*2*/
} )
"-"
LIBC
 
"exit"
 ;;

"*:Minix:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-minix"
"exit"
 ;;

"aarch64:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"aarch64_be:Linux:*:*"
let 
"UNAME_MACHINE"
 = 
"aarch64_be"
 ; /*4*/
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"alpha:Linux:*:*"
switch ( 
$( "sed" + /*2*/"-n" + /*2*/"/^cpu model/s/^.*: \\(.*\\)/\\1/p" + /*2*/ <  + /*2*/"/proc/cpuinfo" )
 + /*5*/
 ) {

"EV5"
let 
"UNAME_MACHINE"
 = 
"alphaev5"
 ; /*4*/
 ;;

"EV56"
let 
"UNAME_MACHINE"
 = 
"alphaev56"
 ; /*4*/
 ;;

"PCA56"
let 
"UNAME_MACHINE"
 = 
"alphapca56"
 ; /*4*/
 ;;

"PCA57"
let 
"UNAME_MACHINE"
 = 
"alphapca56"
 ; /*4*/
 ;;

"EV6"
let 
"UNAME_MACHINE"
 = 
"alphaev6"
 ; /*4*/
 ;;

"EV67"
let 
"UNAME_MACHINE"
 = 
"alphaev67"
 ; /*4*/
 ;;

"EV68*"
let 
"UNAME_MACHINE"
 = 
"alphaev68"
 ; /*4*/
 ;;


}
{

"objdump"
"--private-headers"
"/bin/sh"
 | 
"grep"
"-q"
"ld.so.1"

}
if ( 
"test"
process.exitCode
 
"="
"0"
 ) 
{

let 
"LIBC"
 = 
"gnulibc1"
 ; /*4*/

} 
 else {


} 
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"arc:Linux:*:*"
"arceb:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"arm*:Linux:*:*"
"set_cc_for_build"
if ( 
{

{

"echo"
"__ARM_EABI__"
 | 
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"

}
 | 
"grep"
"-q"
"__ARM_EABI__"

}
 ) 
{

"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 

} 
 else {

if ( 
 ) 
{

if ( 
{

{

"echo"
"__ARM_PCS_VFP"
 | 
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"

}
 | 
"grep"
"-q"
"__ARM_PCS_VFP"

}
 ) 
{

"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"eabi"

} 
 else {

if ( 
 ) 
{

"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"eabihf"

} 
 else {


} 

} 

} 
 else {


} 

} 
"exit"
 ;;

"avr32*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"cris:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-axis-linux-"
LIBC
 
"exit"
 ;;

"crisv32:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-axis-linux-"
LIBC
 
"exit"
 ;;

"e2k:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"frv:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"hexagon:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"i*86:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-pc-linux-"
LIBC
 
"exit"
 ;;

"ia64:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"k1om:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"m32r*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"m68*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"mips:Linux:*:*"
"mips64:Linux:*:*"
"set_cc_for_build"
"sed"
"s/^\t//"
 << 
"EOF"
"\t#undef CPU\n\t#undef "
(
UNAME_MACHINE
)
 
"\n\t#undef "
(
UNAME_MACHINE
)
 
"el\n\t#if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)\n\tCPU="
(
UNAME_MACHINE
)
 
"el\n\t#else\n\t#if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)\n\tCPU="
(
UNAME_MACHINE
)
 
"\n\t#else\n\tCPU=\n\t#endif\n\t#endif\n"
 > 
dummy
 
".c"
"eval"
$( {
 + /*2*/CC_FOR_BUILD + /*2*/  + /*2*/"-E" + /*2*/dummy + /*2*/  + /*2*/".c" + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ |  + /*2*/"grep" + /*2*/"^CPU" + /*2*/
} )
{

"test"
"x"
CPU
 
"!="
"x"
 && 
"echo"
CPU
 
"-unknown-linux-"
LIBC
 
"exit"
 ;//3


}
 ;;

"mips64el:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"openrisc*:Linux:*:*"
"echo"
"or1k-unknown-linux-"
LIBC
 
"exit"
 ;;

"or32:Linux:*:*"
"or1k*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"padre:Linux:*:*"
"echo"
"sparc-unknown-linux-"
LIBC
 
"exit"
 ;;

"parisc64:Linux:*:*"
"hppa64:Linux:*:*"
"echo"
"hppa64-unknown-linux-"
LIBC
 
"exit"
 ;;

"parisc:Linux:*:*"
"hppa:Linux:*:*"
//  Look for CPU level
switch ( 
$( {
 + /*2*/"grep" + /*2*/"^cpu[^a-z]*:" + /*2*/"/proc/cpuinfo" + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ |  + /*2*/"cut" + /*2*/"-d" + /*2*/" " + /*2*/"-f2" + /*2*/
} )
 + /*5*/
 ) {

"PA7*"
"echo"
"hppa1.1-unknown-linux-"
LIBC
 
 ;;

"PA8*"
"echo"
"hppa2.0-unknown-linux-"
LIBC
 
 ;;

"*"
"echo"
"hppa-unknown-linux-"
LIBC
 
 ;;


}
"exit"
 ;;

"ppc64:Linux:*:*"
"echo"
"powerpc64-unknown-linux-"
LIBC
 
"exit"
 ;;

"ppc:Linux:*:*"
"echo"
"powerpc-unknown-linux-"
LIBC
 
"exit"
 ;;

"ppc64le:Linux:*:*"
"echo"
"powerpc64le-unknown-linux-"
LIBC
 
"exit"
 ;;

"ppcle:Linux:*:*"
"echo"
"powerpcle-unknown-linux-"
LIBC
 
"exit"
 ;;

"riscv32:Linux:*:*"
"riscv64:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"s390:Linux:*:*"
"s390x:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-ibm-linux-"
LIBC
 
"exit"
 ;;

"sh64*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"sh*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"sparc:Linux:*:*"
"sparc64:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"tile*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"vax:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-dec-linux-"
LIBC
 
"exit"
 ;;

"x86_64:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-pc-linux-"
LIBC
 
"exit"
 ;;

"xtensa*:Linux:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-linux-"
LIBC
 
"exit"
 ;;

"i*86:DYNIX/ptx:4*:*"
//  ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.
//  earlier versions are messed up and put the nodename in both
//  sysname and nodename.
"echo"
"i386-sequent-sysv4"
"exit"
 ;;

"i*86:UNIX_SV:4.2MP:2.*"
//  Unixware is an offshoot of SVR4, but it has its own version
//  number series starting with 2...
//  I am not positive that other SVR4 systems won't match this,
//  I just have to hope.  -- rms.
//  Use sysv4.2uw... so that sysv4* matches it.
"echo"
UNAME_MACHINE
 
"-pc-sysv4.2uw"
UNAME_VERSION
 
"exit"
 ;;

"i*86:OS/2:*:*"
//  If we were able to find `uname', then EMX Unix compatibility
//  is probably installed.
"echo"
UNAME_MACHINE
 
"-pc-os2-emx"
"exit"
 ;;

"i*86:XTS-300:*:STOP"
"echo"
UNAME_MACHINE
 
"-unknown-stop"
"exit"
 ;;

"i*86:atheos:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-atheos"
"exit"
 ;;

"i*86:syllable:*:*"
"echo"
UNAME_MACHINE
 
"-pc-syllable"
"exit"
 ;;

"i*86:LynxOS:2.*:*"
"i*86:LynxOS:3.[01]*:*"
"i*86:LynxOS:4.[02]*:*"
"echo"
"i386-unknown-lynxos"
UNAME_RELEASE
 
"exit"
 ;;

"i*86:*DOS:*:*"
"echo"
UNAME_MACHINE
 
"-pc-msdosdjgpp"
"exit"
 ;;

"i*86:*:4.*:*"
let 
"UNAME_REL"
 = 
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"s/\\/MP$//" + /*2*/
} )
 ; /*4*/
if ( 
"grep"
"Novell"
"/usr/include/link.h"
 > 
"/dev/null"
"2"
 > 
"/dev/null"
 ) 
{

"echo"
UNAME_MACHINE
 
"-univel-sysv"
UNAME_REL
 

} 
 else {

if ( 
 ) 
{

"echo"
UNAME_MACHINE
 
"-pc-sysv"
UNAME_REL
 

} 
 else {


} 

} 
"exit"
 ;;

"i*86:*:5:[678]*"
//  UnixWare 7.x, OpenUNIX and OpenServer 6.
switch ( 
$( {
 + /*2*/"/bin/uname" + /*2*/"-X" + /*2*/ |  + /*2*/"grep" + /*2*/"^Machine" + /*2*/
} )
 + /*5*/
 ) {

"*486*"
let 
"UNAME_MACHINE"
 = 
"i486"
 ; /*4*/
 ;;

"*Pentium"
let 
"UNAME_MACHINE"
 = 
"i586"
 ; /*4*/
 ;;

"*Pent*"
"*Celeron"
let 
"UNAME_MACHINE"
 = 
"i686"
 ; /*4*/
 ;;


}
"echo"
UNAME_MACHINE
 
"-unknown-sysv"
(
UNAME_RELEASE
)
 
(
UNAME_SYSTEM
)
 
(
UNAME_VERSION
)
 
"exit"
 ;;

"i*86:*:3.2:*"
if ( 
"test"
"-f"
"/usr/options/cb.name"
 ) 
{

let 
"UNAME_REL"
 = 
$( "sed" + /*2*/"-n" + /*2*/"s/.*Version //p" + /*2*/ <  + /*2*/"/usr/options/cb.name" )
 ; /*4*/
"echo"
UNAME_MACHINE
 
"-pc-isc"
UNAME_REL
 

} 
 else {

if ( 
"/bin/uname"
"-X"
"2"
 > 
"/dev/null"
 > 
"/dev/null"
 ) 
{

let 
"UNAME_REL"
 = 
$(  (  + /*2*/{
 + /*2*/{
 + /*2*/"/bin/uname" + /*2*/"-X" + /*2*/ |  + /*2*/"grep" + /*2*/"Release" + /*2*/
} + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/.*= //" + /*2*/
} + /*2*/  + /*2*/ )  )
 ; /*4*/
{

 ( 
{

"/bin/uname"
"-X"
 | 
"grep"
"i80486"
 > 
"/dev/null"

}
 
 ) 
 && 
let 
"UNAME_MACHINE"
 = 
"i486"
 ; /*4*/

}
{

 ( 
{

"/bin/uname"
"-X"
 | 
"grep"
"^Machine.*Pentium"
 > 
"/dev/null"

}
 
 ) 
 && 
let 
"UNAME_MACHINE"
 = 
"i586"
 ; /*4*/

}
{

 ( 
{

"/bin/uname"
"-X"
 | 
"grep"
"^Machine.*Pent *II"
 > 
"/dev/null"

}
 
 ) 
 && 
let 
"UNAME_MACHINE"
 = 
"i686"
 ; /*4*/

}
{

 ( 
{

"/bin/uname"
"-X"
 | 
"grep"
"^Machine.*Pentium Pro"
 > 
"/dev/null"

}
 
 ) 
 && 
let 
"UNAME_MACHINE"
 = 
"i686"
 ; /*4*/

}
"echo"
UNAME_MACHINE
 
"-pc-sco"
UNAME_REL
 

} 
 else {

if ( 
 ) 
{

"echo"
UNAME_MACHINE
 
"-pc-sysv32"

} 
 else {


} 

} 

} 
"exit"
 ;;

"pc:*:*:*"
//  Left here for compatibility:
//  uname -m prints for DJGPP always 'pc', but it prints nothing about
//  the processor, so we play safe by assuming i586.
//  Note: whatever this is, it MUST be the same as what config.sub
//  prints for the "djgpp" host, or else GDB configure will decide that
//  this is a cross-build.
"echo"
"i586-pc-msdosdjgpp"
"exit"
 ;;

"Intel:Mach:3*:*"
"echo"
"i386-pc-mach3"
"exit"
 ;;

"paragon:*:*:*"
"echo"
"i860-intel-osf1"
"exit"
 ;;

"i860:*:4.*:*"
//  i860-SVR4
if ( 
"grep"
"Stardent"
"/usr/include/sys/uadmin.h"
 > 
"/dev/null"
"2"
 >& 
"1"
 ) 
{

//  Stardent Vistra i860-SVR4
"echo"
"i860-stardent-sysv"
UNAME_RELEASE
 

} 
 else {

if ( 
 ) 
{

//  Unknown i860-SVR4
"echo"
"i860-unknown-sysv"
UNAME_RELEASE
 

} 
 else {


} 

} 
//  Add other i860-SVR4 vendors below as they are discovered.
"exit"
 ;;

"mini*:CTIX:SYS*5:*"
//  "miniframe"
"echo"
"m68010-convergent-sysv"
"exit"
 ;;

"mc68k:UNIX:SYSTEM5:3.51m"
"echo"
"m68k-convergent-sysv"
"exit"
 ;;

"M680?0:D-NIX:5.3:*"
"echo"
"m68k-diab-dnix"
"exit"
 ;;

"M68*:*:R3V[5678]*:*"
{

"test"
"-r"
"/sysV68"
 && 
"echo"
"m68k-motorola-sysv"
"exit"
 ;//3


}
 ;;

"3[345]??:*:4.0:3.0"
"3[34]??A:*:4.0:3.0"
"3[34]??,*:*:4.0:3.0"
"3[34]??/*:*:4.0:3.0"
"4400:*:4.0:3.0"
"4850:*:4.0:3.0"
"SKA40:*:4.0:3.0"
"SDS2:*:4.0:3.0"
"SHG2:*:4.0:3.0"
"S7501*:*:4.0:3.0"
let 
"OS_REL"
 = 
""
 ; /*4*/
{

"test"
"-r"
"/etc/.relid"
 && 
let 
"OS_REL"
 = 
"."
$( "sed" + /*2*/"-n" + /*2*/"s/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p" + /*2*/ <  + /*2*/"/etc/.relid" )
 ; /*4*/

}
{

{

"/bin/uname"
"-p"
"2"
 > 
"/dev/null"
 | 
"grep"
"86"
 > 
"/dev/null"

}
 && 
"echo"
"i486-ncr-sysv4.3"
OS_REL
 
"exit"
 ;//3


}
{

{

"/bin/uname"
"-p"
"2"
 > 
"/dev/null"
 | 
"/bin/grep"
"entium"
 > 
"/dev/null"

}
 && 
"echo"
"i586-ncr-sysv4.3"
OS_REL
 
"exit"
 ;//3


}
 ;;

"3[34]??:*:4.0:*"
"3[34]??,*:*:4.0:*"
{

{

"/bin/uname"
"-p"
"2"
 > 
"/dev/null"
 | 
"grep"
"86"
 > 
"/dev/null"

}
 && 
"echo"
"i486-ncr-sysv4"
"exit"
 ;//3


}
 ;;

"NCR*:*:4.2:*"
"MPRAS*:*:4.2:*"
let 
"OS_REL"
 = 
".3"
 ; /*4*/
{

"test"
"-r"
"/etc/.relid"
 && 
let 
"OS_REL"
 = 
"."
$( "sed" + /*2*/"-n" + /*2*/"s/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p" + /*2*/ <  + /*2*/"/etc/.relid" )
 ; /*4*/

}
{

{

"/bin/uname"
"-p"
"2"
 > 
"/dev/null"
 | 
"grep"
"86"
 > 
"/dev/null"

}
 && 
"echo"
"i486-ncr-sysv4.3"
OS_REL
 
"exit"
 ;//3


}
{

{

"/bin/uname"
"-p"
"2"
 > 
"/dev/null"
 | 
"/bin/grep"
"entium"
 > 
"/dev/null"

}
 && 
"echo"
"i586-ncr-sysv4.3"
OS_REL
 
"exit"
 ;//3


}
{

{

"/bin/uname"
"-p"
"2"
 > 
"/dev/null"
 | 
"/bin/grep"
"pteron"
 > 
"/dev/null"

}
 && 
"echo"
"i586-ncr-sysv4.3"
OS_REL
 
"exit"
 ;//3


}
 ;;

"m68*:LynxOS:2.*:*"
"m68*:LynxOS:3.0*:*"
"echo"
"m68k-unknown-lynxos"
UNAME_RELEASE
 
"exit"
 ;;

"mc68030:UNIX_System_V:4.*:*"
"echo"
"m68k-atari-sysv4"
"exit"
 ;;

"TSUNAMI:LynxOS:2.*:*"
"echo"
"sparc-unknown-lynxos"
UNAME_RELEASE
 
"exit"
 ;;

"rs6000:LynxOS:2.*:*"
"echo"
"rs6000-unknown-lynxos"
UNAME_RELEASE
 
"exit"
 ;;

"PowerPC:LynxOS:2.*:*"
"PowerPC:LynxOS:3.[01]*:*"
"PowerPC:LynxOS:4.[02]*:*"
"echo"
"powerpc-unknown-lynxos"
UNAME_RELEASE
 
"exit"
 ;;

"SM[BE]S:UNIX_SV:*:*"
"echo"
"mips-dde-sysv"
UNAME_RELEASE
 
"exit"
 ;;

"RM*:ReliantUNIX-*:*:*"
"echo"
"mips-sni-sysv4"
"exit"
 ;;

"RM*:SINIX-*:*:*"
"echo"
"mips-sni-sysv4"
"exit"
 ;;

"*:SINIX-*:*:*"
if ( 
"uname"
"-p"
"2"
 > 
"/dev/null"
 > 
"/dev/null"
 ) 
{

let 
"UNAME_MACHINE"
 = 
$(  (  + /*2*/"uname" + /*2*/"-p" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
"echo"
UNAME_MACHINE
 
"-sni-sysv4"

} 
 else {

if ( 
 ) 
{

"echo"
"ns32k-sni-sysv"

} 
 else {


} 

} 
"exit"
 ;;

"PENTIUM:*:4.0*:*"
//  Unisys `ClearPath HMP IX 4000' SVR4/MP effort
//  says <Richard.M.Bartel@ccMail.Census.GOV>
"echo"
"i586-unisys-sysv4"
"exit"
 ;;

"*:UNIX_System_V:4*:FTX*"
//  From Gerald Hewes <hewes@openmarket.com>.
//  How about differentiating between stratus architectures? -djm
"echo"
"hppa1.1-stratus-sysv4"
"exit"
 ;;

"*:*:*:FTX*"
//  From seanf@swdc.stratus.com.
"echo"
"i860-stratus-sysv4"
"exit"
 ;;

"i*86:VOS:*:*"
//  From Paul.Green@stratus.com.
"echo"
UNAME_MACHINE
 
"-stratus-vos"
"exit"
 ;;

"*:VOS:*:*"
//  From Paul.Green@stratus.com.
"echo"
"hppa1.1-stratus-vos"
"exit"
 ;;

"mc68*:A/UX:*:*"
"echo"
"m68k-apple-aux"
UNAME_RELEASE
 
"exit"
 ;;

"news*:NEWS-OS:6*:*"
"echo"
"mips-sony-newsos6"
"exit"
 ;;

"R[34]000:*System_V*:*:*"
"R4000:UNIX_SYSV:*:*"
"R*000:UNIX_SV:*:*"
if ( 
"["
"-d"
"/usr/nec"
"]"
 ) 
{

"echo"
"mips-nec-sysv"
UNAME_RELEASE
 

} 
 else {

if ( 
 ) 
{

"echo"
"mips-unknown-sysv"
UNAME_RELEASE
 

} 
 else {


} 

} 
"exit"
 ;;

"BeBox:BeOS:*:*"
//  BeOS running on hardware made by Be, PPC only.
"echo"
"powerpc-be-beos"
"exit"
 ;;

"BeMac:BeOS:*:*"
//  BeOS running on Mac or Mac clone, PPC only.
"echo"
"powerpc-apple-beos"
"exit"
 ;;

"BePC:BeOS:*:*"
//  BeOS running on Intel PC compatible.
"echo"
"i586-pc-beos"
"exit"
 ;;

"BePC:Haiku:*:*"
//  Haiku running on Intel PC compatible.
"echo"
"i586-pc-haiku"
"exit"
 ;;

"x86_64:Haiku:*:*"
"echo"
"x86_64-unknown-haiku"
"exit"
 ;;

"SX-4:SUPER-UX:*:*"
"echo"
"sx4-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"SX-5:SUPER-UX:*:*"
"echo"
"sx5-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"SX-6:SUPER-UX:*:*"
"echo"
"sx6-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"SX-7:SUPER-UX:*:*"
"echo"
"sx7-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"SX-8:SUPER-UX:*:*"
"echo"
"sx8-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"SX-8R:SUPER-UX:*:*"
"echo"
"sx8r-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"SX-ACE:SUPER-UX:*:*"
"echo"
"sxace-nec-superux"
UNAME_RELEASE
 
"exit"
 ;;

"Power*:Rhapsody:*:*"
"echo"
"powerpc-apple-rhapsody"
UNAME_RELEASE
 
"exit"
 ;;

"*:Rhapsody:*:*"
"echo"
UNAME_MACHINE
 
"-apple-rhapsody"
UNAME_RELEASE
 
"exit"
 ;;

"*:Darwin:*:*"
{

let 
"UNAME_PROCESSOR"
 = 
$( "uname" + /*2*/"-p" )
 ; /*4*/
 || 
let 
"UNAME_PROCESSOR"
 = 
"unknown"
 ; /*4*/

}
"set_cc_for_build"
if ( 
"test"
UNAME_PROCESSOR
 
"="
"unknown"
 ) 
{

let 
"UNAME_PROCESSOR"
 = 
"powerpc"
 ; /*4*/

} 
 else {


} 
if ( 
"test"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/\\..*//" + /*2*/
} )
"-le"
"10"
 ) 
{

if ( 
"["
CC_FOR_BUILD
 
"!="
"no_compiler_found"
"]"
 ) 
{

if ( 
{

{

 ( 
"echo"
"#ifdef __LP64__"
"echo"
"IS_64BIT_ARCH"
"echo"
"#endif"
 
 ) 
 | 
 ( 
let 
"CCOPTS"
 = 
 ; /*4*/
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"
 
 ) 

}
 | 
"grep"
"IS_64BIT_ARCH"
 > 
"/dev/null"

}
 ) 
{

switch ( 
UNAME_PROCESSOR
 
 + /*5*/
 ) {

"i386"
let 
"UNAME_PROCESSOR"
 = 
"x86_64"
 ; /*4*/
 ;;

"powerpc"
let 
"UNAME_PROCESSOR"
 = 
"powerpc64"
 ; /*4*/
 ;;


}

} 
 else {


} 
//  On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc
if ( 
{

{

 ( 
"echo"
"#ifdef __POWERPC__"
"echo"
"IS_PPC"
"echo"
"#endif"
 
 ) 
 | 
 ( 
let 
"CCOPTS"
 = 
 ; /*4*/
CC_FOR_BUILD
 
"-E"
"-"
"2"
 > 
"/dev/null"
 
 ) 

}
 | 
"grep"
"IS_PPC"
 > 
"/dev/null"

}
 ) 
{

let 
"UNAME_PROCESSOR"
 = 
"powerpc"
 ; /*4*/

} 
 else {


} 

} 
 else {


} 

} 
 else {

if ( 
"test"
UNAME_PROCESSOR
 
"="
"i386"
 ) 
{

//  Avoid executing cc on OS X 10.9, as it ships with a stub
//  that puts up a graphical alert prompting to install
//  developer tools.  Any system running Mac OS X 10.7 or
//  later (Darwin 11 and later) is required to have a 64-bit
//  processor. This is not true of the ARM version of Darwin
//  that Apple uses in portable devices.
let 
"UNAME_PROCESSOR"
 = 
"x86_64"
 ; /*4*/

} 
 else {


} 

} 
"echo"
UNAME_PROCESSOR
 
"-apple-darwin"
UNAME_RELEASE
 
"exit"
 ;;

"*:procnto*:*:*"
"*:QNX:[0123456789]*:*"
let 
"UNAME_PROCESSOR"
 = 
$( "uname" + /*2*/"-p" )
 ; /*4*/
if ( 
"test"
UNAME_PROCESSOR
 
"="
"x86"
 ) 
{

let 
"UNAME_PROCESSOR"
 = 
"i386"
 ; /*4*/
let 
"UNAME_MACHINE"
 = 
"pc"
 ; /*4*/

} 
 else {


} 
"echo"
UNAME_PROCESSOR
 
"-"
UNAME_MACHINE
 
"-nto-qnx"
UNAME_RELEASE
 
"exit"
 ;;

"*:QNX:*:4*"
"echo"
"i386-pc-qnx"
"exit"
 ;;

"NEO-*:NONSTOP_KERNEL:*:*"
"echo"
"neo-tandem-nsk"
UNAME_RELEASE
 
"exit"
 ;;

"NSE-*:NONSTOP_KERNEL:*:*"
"echo"
"nse-tandem-nsk"
UNAME_RELEASE
 
"exit"
 ;;

"NSR-*:NONSTOP_KERNEL:*:*"
"echo"
"nsr-tandem-nsk"
UNAME_RELEASE
 
"exit"
 ;;

"NSV-*:NONSTOP_KERNEL:*:*"
"echo"
"nsv-tandem-nsk"
UNAME_RELEASE
 
"exit"
 ;;

"NSX-*:NONSTOP_KERNEL:*:*"
"echo"
"nsx-tandem-nsk"
UNAME_RELEASE
 
"exit"
 ;;

"*:NonStop-UX:*:*"
"echo"
"mips-compaq-nonstopux"
"exit"
 ;;

"BS2000:POSIX*:*:*"
"echo"
"bs2000-siemens-sysv"
"exit"
 ;;

"DS/*:UNIX_System_V:*:*"
"echo"
UNAME_MACHINE
 
"-"
UNAME_SYSTEM
 
"-"
UNAME_RELEASE
 
"exit"
 ;;

"*:Plan9:*:*"
//  "uname -m" is not consistent, so use $cputype instead. 386
//  is converted to i386 for consistency with other x86
//  operating systems.
//  shellcheck disable=SC2154
if ( 
"test"
cputype
 
"="
"386"
 ) 
{

let 
"UNAME_MACHINE"
 = 
"i386"
 ; /*4*/

} 
 else {

if ( 
 ) 
{

let 
"UNAME_MACHINE"
 = 
cputype
 
 ; /*4*/

} 
 else {


} 

} 
"echo"
UNAME_MACHINE
 
"-unknown-plan9"
"exit"
 ;;

"*:TOPS-10:*:*"
"echo"
"pdp10-unknown-tops10"
"exit"
 ;;

"*:TENEX:*:*"
"echo"
"pdp10-unknown-tenex"
"exit"
 ;;

"KS10:TOPS-20:*:*"
"KL10:TOPS-20:*:*"
"TYPE4:TOPS-20:*:*"
"echo"
"pdp10-dec-tops20"
"exit"
 ;;

"XKL-1:TOPS-20:*:*"
"TYPE5:TOPS-20:*:*"
"echo"
"pdp10-xkl-tops20"
"exit"
 ;;

"*:TOPS-20:*:*"
"echo"
"pdp10-unknown-tops20"
"exit"
 ;;

"*:ITS:*:*"
"echo"
"pdp10-unknown-its"
"exit"
 ;;

"SEI:*:*:SEIUX"
"echo"
"mips-sei-seiux"
UNAME_RELEASE
 
"exit"
 ;;

"*:DragonFly:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-dragonfly"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/[-(].*//" + /*2*/
} )
"exit"
 ;;

"*:*VMS:*:*"
let 
"UNAME_MACHINE"
 = 
$(  (  + /*2*/"uname" + /*2*/"-p" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
 ; /*4*/
switch ( 
UNAME_MACHINE
 
 + /*5*/
 ) {

"A*"
"echo"
"alpha-dec-vms"
"exit"
 ;;

"I*"
"echo"
"ia64-dec-vms"
"exit"
 ;;

"V*"
"echo"
"vax-dec-vms"
"exit"
 ;;


}
 ;;

"*:XENIX:*:SysV"
"echo"
"i386-pc-xenix"
"exit"
 ;;

"i*86:skyos:*:*"
"echo"
UNAME_MACHINE
 
"-pc-skyos"
$( {
 + /*2*/"echo" + /*2*/UNAME_RELEASE + /*2*/  + /*2*/ |  + /*2*/"sed" + /*2*/"-e" + /*2*/"s/ .*$//" + /*2*/
} )
"exit"
 ;;

"i*86:rdos:*:*"
"echo"
UNAME_MACHINE
 
"-pc-rdos"
"exit"
 ;;

"i*86:AROS:*:*"
"echo"
UNAME_MACHINE
 
"-pc-aros"
"exit"
 ;;

"x86_64:VMkernel:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-esx"
"exit"
 ;;

"amd64:Isilon\\ OneFS:*:*"
"echo"
"x86_64-unknown-onefs"
"exit"
 ;;

"*:Unleashed:*:*"
"echo"
UNAME_MACHINE
 
"-unknown-unleashed"
UNAME_RELEASE
 
"exit"
 ;;


}
"echo"
process.argv0
 
": unable to guess system type"
 >& 
"2"
switch ( 
UNAME_MACHINE
 
":"
UNAME_SYSTEM
 
 + /*5*/
 ) {

"mips:Linux"
"mips64:Linux"
//  If we got here on MIPS GNU/Linux, output extra information.
"cat"
 >& 
"2"
 << 
"EOF"
"\nNOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\nthe system type. Please install a C compiler and try again.\n"
 ;;


}
"cat"
 >& 
"2"
 << 
"EOF"
"\nThis script (version "
timestamp
 
"), has failed to recognize the\noperating system you are using. If your script is old, overwrite *all*\ncopies of config.guess and config.sub with the latest versions from:\n\n  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\nand\n  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n\nIf "
process.argv0
 
" has already been updated, send the following data and any\ninformation you think might be pertinent to config-patches@gnu.org to\nprovide the necessary information to handle your system.\n\nconfig.guess timestamp = "
timestamp
 
"\n\nuname -m = "
$( {
 + /*2*/ (  + /*2*/"uname" + /*2*/"-m" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ ||  + /*2*/"echo" + /*2*/"unknown" + /*2*/
} )
"\nuname -r = "
$( {
 + /*2*/ (  + /*2*/"uname" + /*2*/"-r" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ ||  + /*2*/"echo" + /*2*/"unknown" + /*2*/
} )
"\nuname -s = "
$( {
 + /*2*/ (  + /*2*/"uname" + /*2*/"-s" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ ||  + /*2*/"echo" + /*2*/"unknown" + /*2*/
} )
"\nuname -v = "
$( {
 + /*2*/ (  + /*2*/"uname" + /*2*/"-v" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" + /*2*/ ||  + /*2*/"echo" + /*2*/"unknown" + /*2*/
} )
"\n\n/usr/bin/uname -p = "
$(  (  + /*2*/"/usr/bin/uname" + /*2*/"-p" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n/bin/uname -X     = "
$(  (  + /*2*/"/bin/uname" + /*2*/"-X" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n\nhostinfo               = "
$(  (  + /*2*/"hostinfo" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n/bin/universe          = "
$(  (  + /*2*/"/bin/universe" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n/usr/bin/arch -k       = "
$(  (  + /*2*/"/usr/bin/arch" + /*2*/"-k" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n/bin/arch              = "
$(  (  + /*2*/"/bin/arch" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n/usr/bin/oslevel       = "
$(  (  + /*2*/"/usr/bin/oslevel" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n/usr/convex/getsysinfo = "
$(  (  + /*2*/"/usr/convex/getsysinfo" + /*2*/  + /*2*/ )  + /*2*/"2" + /*2*/ >  + /*2*/"/dev/null" )
"\n\nUNAME_MACHINE = \""
UNAME_MACHINE
 
"\"\nUNAME_RELEASE = \""
UNAME_RELEASE
 
"\"\nUNAME_SYSTEM  = \""
UNAME_SYSTEM
 
"\"\nUNAME_VERSION = \""
UNAME_VERSION
 
"\"\n"
"exit"
"1"
//  Local variables:
//  eval: (add-hook 'before-save-hook 'time-stamp)
//  time-stamp-start: "timestamp='"
//  time-stamp-format: "%:y-%02m-%02d"
//  time-stamp-end: "'"
//  End: