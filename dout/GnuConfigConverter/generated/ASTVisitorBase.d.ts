/**
 * Copyright (c) 2019 Kai Henningsen <kai.extern+mechanic@gmail.com>
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */
import { ASTNode } from "./ASTNode";
import { ASTNodeArithmCmd } from "./ASTNodeArithmCmd";
import { ASTNodeArithmExp } from "./ASTNodeArithmExp";
import { ASTNodeArrayElem } from "./ASTNodeArrayElem";
import { ASTNodeArrayExpr } from "./ASTNodeArrayExpr";
import { ASTNodeAssign } from "./ASTNodeAssign";
import { ASTNodeBinaryArithm } from "./ASTNodeBinaryArithm";
import { ASTNodeBinaryCmd } from "./ASTNodeBinaryCmd";
import { ASTNodeBinaryTest } from "./ASTNodeBinaryTest";
import { ASTNodeBlock } from "./ASTNodeBlock";
import { ASTNodeBraceExp } from "./ASTNodeBraceExp";
import { ASTNodeCallExpr } from "./ASTNodeCallExpr";
import { ASTNodeCaseClause } from "./ASTNodeCaseClause";
import { ASTNodeCaseItem } from "./ASTNodeCaseItem";
import { ASTNodeCmdSubst } from "./ASTNodeCmdSubst";
import { ASTNodeComment } from "./ASTNodeComment";
import { ASTNodeCoprocClause } from "./ASTNodeCoprocClause";
import { ASTNodeCStyleLoop } from "./ASTNodeCStyleLoop";
import { ASTNodeDblQuoted } from "./ASTNodeDblQuoted";
import { ASTNodeDeclClause } from "./ASTNodeDeclClause";
import { ASTNodeExtGlob } from "./ASTNodeExtGlob";
import { ASTNodeFile } from "./ASTNodeFile";
import { ASTNodeForClause } from "./ASTNodeForClause";
import { ASTNodeFuncDecl } from "./ASTNodeFuncDecl";
import { ASTNodeIfClause } from "./ASTNodeIfClause";
import { ASTNodeLetClause } from "./ASTNodeLetClause";
import { ASTNodeLit } from "./ASTNodeLit";
import { ASTNodeParamExp } from "./ASTNodeParamExp";
import { ASTNodeParenArithm } from "./ASTNodeParenArithm";
import { ASTNodeParenTest } from "./ASTNodeParenTest";
import { ASTNodeProcSubst } from "./ASTNodeProcSubst";
import { ASTNodeRedirect } from "./ASTNodeRedirect";
import { ASTNodeSglQuoted } from "./ASTNodeSglQuoted";
import { ASTNodeStmt } from "./ASTNodeStmt";
import { ASTNodeStmtList } from "./ASTNodeStmtList";
import { ASTNodeSubshell } from "./ASTNodeSubshell";
import { ASTNodeTestClause } from "./ASTNodeTestClause";
import { ASTNodeTimeClause } from "./ASTNodeTimeClause";
import { ASTNodeUnaryArithm } from "./ASTNodeUnaryArithm";
import { ASTNodeUnaryTest } from "./ASTNodeUnaryTest";
import { ASTNodeWhileClause } from "./ASTNodeWhileClause";
import { ASTNodeWord } from "./ASTNodeWord";
import { ASTNodeWordIter } from "./ASTNodeWordIter";
export declare class ASTVisitorBase {
    visitAllPreBefore(node: ASTNode): void;
    visitAllPreAfter(node: ASTNode): void;
    visitAllPostBefore(node: ASTNode): void;
    visitAllPostAfter(node: ASTNode): void;
    visitASTNodeArithmCmdPre(node: ASTNodeArithmCmd): void;
    visitASTNodeArithmCmdPost(node: ASTNodeArithmCmd): void;
    visitASTNodeArithmExpPre(node: ASTNodeArithmExp): void;
    visitASTNodeArithmExpPost(node: ASTNodeArithmExp): void;
    visitASTNodeArrayElemPre(node: ASTNodeArrayElem): void;
    visitASTNodeArrayElemPost(node: ASTNodeArrayElem): void;
    visitASTNodeArrayExprPre(node: ASTNodeArrayExpr): void;
    visitASTNodeArrayExprPost(node: ASTNodeArrayExpr): void;
    visitASTNodeAssignPre(node: ASTNodeAssign): void;
    visitASTNodeAssignPost(node: ASTNodeAssign): void;
    visitASTNodeBinaryArithmPre(node: ASTNodeBinaryArithm): void;
    visitASTNodeBinaryArithmPost(node: ASTNodeBinaryArithm): void;
    visitASTNodeBinaryCmdPre(node: ASTNodeBinaryCmd): void;
    visitASTNodeBinaryCmdPost(node: ASTNodeBinaryCmd): void;
    visitASTNodeBinaryTestPre(node: ASTNodeBinaryTest): void;
    visitASTNodeBinaryTestPost(node: ASTNodeBinaryTest): void;
    visitASTNodeBlockPre(node: ASTNodeBlock): void;
    visitASTNodeBlockPost(node: ASTNodeBlock): void;
    visitASTNodeBraceExpPre(node: ASTNodeBraceExp): void;
    visitASTNodeBraceExpPost(node: ASTNodeBraceExp): void;
    visitASTNodeCallExprPre(node: ASTNodeCallExpr): void;
    visitASTNodeCallExprPost(node: ASTNodeCallExpr): void;
    visitASTNodeCaseClausePre(node: ASTNodeCaseClause): void;
    visitASTNodeCaseClausePost(node: ASTNodeCaseClause): void;
    visitASTNodeCaseItemPre(node: ASTNodeCaseItem): void;
    visitASTNodeCaseItemPost(node: ASTNodeCaseItem): void;
    visitASTNodeCmdSubstPre(node: ASTNodeCmdSubst): void;
    visitASTNodeCmdSubstPost(node: ASTNodeCmdSubst): void;
    visitASTNodeCommentPre(node: ASTNodeComment): void;
    visitASTNodeCommentPost(node: ASTNodeComment): void;
    visitASTNodeCoprocClausePre(node: ASTNodeCoprocClause): void;
    visitASTNodeCoprocClausePost(node: ASTNodeCoprocClause): void;
    visitASTNodeCStyleLoopPre(node: ASTNodeCStyleLoop): void;
    visitASTNodeCStyleLoopPost(node: ASTNodeCStyleLoop): void;
    visitASTNodeDblQuotedPre(node: ASTNodeDblQuoted): void;
    visitASTNodeDblQuotedPost(node: ASTNodeDblQuoted): void;
    visitASTNodeDeclClausePre(node: ASTNodeDeclClause): void;
    visitASTNodeDeclClausePost(node: ASTNodeDeclClause): void;
    visitASTNodeExtGlobPre(node: ASTNodeExtGlob): void;
    visitASTNodeExtGlobPost(node: ASTNodeExtGlob): void;
    visitASTNodeFilePre(node: ASTNodeFile): void;
    visitASTNodeFilePost(node: ASTNodeFile): void;
    visitASTNodeForClausePre(node: ASTNodeForClause): void;
    visitASTNodeForClausePost(node: ASTNodeForClause): void;
    visitASTNodeFuncDeclPre(node: ASTNodeFuncDecl): void;
    visitASTNodeFuncDeclPost(node: ASTNodeFuncDecl): void;
    visitASTNodeIfClausePre(node: ASTNodeIfClause): void;
    visitASTNodeIfClausePost(node: ASTNodeIfClause): void;
    visitASTNodeLetClausePre(node: ASTNodeLetClause): void;
    visitASTNodeLetClausePost(node: ASTNodeLetClause): void;
    visitASTNodeLitPre(node: ASTNodeLit): void;
    visitASTNodeLitPost(node: ASTNodeLit): void;
    visitASTNodeParamExpPre(node: ASTNodeParamExp): void;
    visitASTNodeParamExpPost(node: ASTNodeParamExp): void;
    visitASTNodeParenArithmPre(node: ASTNodeParenArithm): void;
    visitASTNodeParenArithmPost(node: ASTNodeParenArithm): void;
    visitASTNodeParenTestPre(node: ASTNodeParenTest): void;
    visitASTNodeParenTestPost(node: ASTNodeParenTest): void;
    visitASTNodeProcSubstPre(node: ASTNodeProcSubst): void;
    visitASTNodeProcSubstPost(node: ASTNodeProcSubst): void;
    visitASTNodeRedirectPre(node: ASTNodeRedirect): void;
    visitASTNodeRedirectPost(node: ASTNodeRedirect): void;
    visitASTNodeSglQuotedPre(node: ASTNodeSglQuoted): void;
    visitASTNodeSglQuotedPost(node: ASTNodeSglQuoted): void;
    visitASTNodeStmtPre(node: ASTNodeStmt): void;
    visitASTNodeStmtPost(node: ASTNodeStmt): void;
    visitASTNodeStmtListPre(node: ASTNodeStmtList): void;
    visitASTNodeStmtListPost(node: ASTNodeStmtList): void;
    visitASTNodeSubshellPre(node: ASTNodeSubshell): void;
    visitASTNodeSubshellPost(node: ASTNodeSubshell): void;
    visitASTNodeTestClausePre(node: ASTNodeTestClause): void;
    visitASTNodeTestClausePost(node: ASTNodeTestClause): void;
    visitASTNodeTimeClausePre(node: ASTNodeTimeClause): void;
    visitASTNodeTimeClausePost(node: ASTNodeTimeClause): void;
    visitASTNodeUnaryArithmPre(node: ASTNodeUnaryArithm): void;
    visitASTNodeUnaryArithmPost(node: ASTNodeUnaryArithm): void;
    visitASTNodeUnaryTestPre(node: ASTNodeUnaryTest): void;
    visitASTNodeUnaryTestPost(node: ASTNodeUnaryTest): void;
    visitASTNodeWhileClausePre(node: ASTNodeWhileClause): void;
    visitASTNodeWhileClausePost(node: ASTNodeWhileClause): void;
    visitASTNodeWordPre(node: ASTNodeWord): void;
    visitASTNodeWordPost(node: ASTNodeWord): void;
    visitASTNodeWordIterPre(node: ASTNodeWordIter): void;
    visitASTNodeWordIterPost(node: ASTNodeWordIter): void;
}
//# sourceMappingURL=ASTVisitorBase.d.ts.map