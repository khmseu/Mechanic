/**
 * Copyright (c) 2019 Kai Henningsen <kai.extern+mechanic@gmail.com>
 *
 * This software is released under the MIT License.
 * https://opensource.org/licenses/MIT
 */
import { ISyntaxTreeNode } from "./ISyntaxTreeNode";
import { BinAritOperator, BinCmdOperator, BinTestOperator, CaseOperator, GlobOperator, I_Expansion, I_Pos, I_Replace, I_Slice, IArithmCmd, IArithmExp, IArithmExpr, IArrayElem, IArrayExpr, IAssign, IBinaryArithm, IBinaryCmd, IBinaryTest, IBlock, IBraceExp, ICallExpr, ICaseClause, ICaseItem, ICmdSubst, ICommand, IComment, ICoprocClause, ICStyleLoop, IDblQuoted, IDeclClause, IExtGlob, IFile, IForClause, IFuncDecl, IIfClause, ILetClause, ILit, ILoop, IParamExp, IParenArithm, IParenTest, IProcSubst, IRedirect, ISglQuoted, IStmt, IStmtList, ISubshell, ITestClause, ITestExpr, ITimeClause, IUnaryArithm, IUnaryTest, IWhileClause, IWord, IWordIter, IWordPart, ParNamesOperator, ProcOperator, RedirOperator, UnAritOperator, UnTestOperator } from "./ParserTypes";
export declare function prepArithmCmd(arithmcmd: IArithmCmd | null): ISyntaxTreeNode;
export declare function prepArithmExp(arithmexp: IArithmExp | null): ISyntaxTreeNode;
export declare function prepArithmExpr(arithmexpr: IArithmExpr | null): ISyntaxTreeNode;
export declare function prepArrayElem(arrayelem: IArrayElem | null): ISyntaxTreeNode;
export declare function prepArrayExpr(arrayexpr: IArrayExpr | null): ISyntaxTreeNode;
export declare function prepAssign(assign: IAssign | null): ISyntaxTreeNode;
export declare function prepBinaryArithm(binaryarithm: IBinaryArithm | null): ISyntaxTreeNode;
export declare function prepBinaryCmd(binarycmd: IBinaryCmd | null): ISyntaxTreeNode;
export declare function prepBinaryTest(binarytest: IBinaryTest | null): ISyntaxTreeNode;
export declare function prepBlock(block: IBlock | null): ISyntaxTreeNode;
export declare function prepBraceExp(braceexp: IBraceExp | null): ISyntaxTreeNode;
export declare function prepCStyleLoop(cstyleloop: ICStyleLoop | null): ISyntaxTreeNode;
export declare function prepCallExpr(callexpr: ICallExpr | null): ISyntaxTreeNode;
export declare function prepCaseClause(caseclause: ICaseClause | null): ISyntaxTreeNode;
export declare function prepCaseItem(caseitem: ICaseItem | null): ISyntaxTreeNode;
export declare function prepCmdSubst(cmdsubst: ICmdSubst | null): ISyntaxTreeNode;
export declare function prepCommand(command: ICommand | null): ISyntaxTreeNode;
export declare function prepComment(comment: IComment | null): ISyntaxTreeNode;
export declare function prepCoprocClause(coprocclause: ICoprocClause | null): ISyntaxTreeNode;
export declare function prepDblQuoted(dblquoted: IDblQuoted | null): ISyntaxTreeNode;
export declare function prepDeclClause(declclause: IDeclClause | null): ISyntaxTreeNode;
export declare function prepExtGlob(extglob: IExtGlob | null): ISyntaxTreeNode;
export declare function prepFile(file: IFile | null): ISyntaxTreeNode;
export declare function prepForClause(forclause: IForClause | null): ISyntaxTreeNode;
export declare function prepFuncDecl(funcdecl: IFuncDecl | null): ISyntaxTreeNode;
export declare function prepIfClause(ifclause: IIfClause | null): ISyntaxTreeNode;
export declare function prepLetClause(letclause: ILetClause | null): ISyntaxTreeNode;
export declare function prepLit(lit: ILit | null): ISyntaxTreeNode;
export declare function prepLoop(loop: ILoop | null): ISyntaxTreeNode;
export declare function prepParamExp(paramexp: IParamExp | null): ISyntaxTreeNode;
export declare function prepParenArithm(parenarithm: IParenArithm | null): ISyntaxTreeNode;
export declare function prepParenTest(parentest: IParenTest | null): ISyntaxTreeNode;
export declare function prepProcSubst(procsubst: IProcSubst | null): ISyntaxTreeNode;
export declare function prepRedirect(redirect: IRedirect | null): ISyntaxTreeNode;
export declare function prepSglQuoted(sglquoted: ISglQuoted | null): ISyntaxTreeNode;
export declare function prepStmt(stmt: IStmt | null): ISyntaxTreeNode;
export declare function prepStmtList(stmtlist: IStmtList | null): ISyntaxTreeNode;
export declare function prepSubshell(subshell: ISubshell | null): ISyntaxTreeNode;
export declare function prepTestClause(testclause: ITestClause | null): ISyntaxTreeNode;
export declare function prepTestExpr(testexpr: ITestExpr | null): ISyntaxTreeNode;
export declare function prepTimeClause(timeclause: ITimeClause | null): ISyntaxTreeNode;
export declare function prepUnaryArithm(unaryarithm: IUnaryArithm | null): ISyntaxTreeNode;
export declare function prepUnaryTest(unarytest: IUnaryTest | null): ISyntaxTreeNode;
export declare function prepWhileClause(whileclause: IWhileClause | null): ISyntaxTreeNode;
export declare function prepWord(word: IWord | null): ISyntaxTreeNode;
export declare function prepWordIter(worditer: IWordIter | null): ISyntaxTreeNode;
export declare function prepWordPart(wordpart: IWordPart | null): ISyntaxTreeNode;
export declare function prepArithmExprs(arithmexprs: IArithmExpr[] | null): ISyntaxTreeNode;
export declare function prepArrayElems(arrayelems: IArrayElem[] | null): ISyntaxTreeNode;
export declare function prepAssigns(assigns: IAssign[] | null): ISyntaxTreeNode;
export declare function prepCaseItems(caseitems: ICaseItem[] | null): ISyntaxTreeNode;
export declare function prepComments(comments: IComment[] | null): ISyntaxTreeNode;
export declare function prepRedirects(redirects: IRedirect[] | null): ISyntaxTreeNode;
export declare function prepStmts(stmts: IStmt[] | null): ISyntaxTreeNode;
export declare function prepWords(words: IWord[] | null): ISyntaxTreeNode;
export declare function prepWordParts(wordparts: IWordPart[] | null): ISyntaxTreeNode;
export declare function prepBinAritOperator(aBinaritoperator: BinAritOperator | null): BinAritOperator | null;
export declare function prepBinCmdOperator(aBincmdoperator: BinCmdOperator | null): BinCmdOperator | null;
export declare function prepBinTestOperator(aBintestoperator: BinTestOperator | null): BinTestOperator | null;
export declare function prepboolean(aBoolean: boolean | null): boolean | null;
export declare function prepCaseOperator(aCaseoperator: CaseOperator | null): CaseOperator | null;
export declare function prepGlobOperator(aGloboperator: GlobOperator | null): GlobOperator | null;
export declare function prepExpansion(aExpansion: I_Expansion | null): I_Expansion | null;
export declare function prepPos(aPos: I_Pos | null): I_Pos | null;
export declare function prepReplace(aReplace: I_Replace | null): I_Replace | null;
export declare function prepSlice(aSlice: I_Slice | null): I_Slice | null;
export declare function prepParNamesOperator(aParnamesoperator: ParNamesOperator | null): ParNamesOperator | null;
export declare function prepProcOperator(aProcoperator: ProcOperator | null): ProcOperator | null;
export declare function prepRedirOperator(aRediroperator: RedirOperator | null): RedirOperator | null;
export declare function prepstring(aString: string | null): string | null;
export declare function prepUnAritOperator(aUnaritoperator: UnAritOperator | null): UnAritOperator | null;
export declare function prepUnTestOperator(aUntestoperator: UnTestOperator | null): UnTestOperator | null;
//# sourceMappingURL=ParserPrep.d.ts.map